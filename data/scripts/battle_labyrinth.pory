script EventScript_EnterSanctuary {
	clearflag(FLAG_IN_NEW_ZONE)
	setvar(VAR_TRAINER_MONEY, 0)
	call(EventScript_MoveCameraUp)
	applymovement(1, Common_Movement_ExclamationMark)
	applymovement(OBJ_EVENT_ID_PLAYER, Common_Movement_FaceUp)
	playse(SE_PIN)
	waitmovement(0)
	waitse
	call(EventScript_MoveCameraDown)
	applymovement(1, Common_Movement_Colress_WalkDown)
	waitmovement(0)
	playfanfare(MUS_OBTAIN_BADGE)
	return
}

script EventScript_MoveCameraUp {
	special(SpawnCameraObject)
	applymovement(OBJ_EVENT_ID_CAMERA, Common_Movement_WalkUp)
	waitmovement(0)
	applymovement(OBJ_EVENT_ID_CAMERA, Common_Movement_WalkUp)
	waitmovement(0)
	special(RemoveCameraObject)
	return
}

script EventScript_MoveCameraDown {
	special(SpawnCameraObject)
	applymovement(OBJ_EVENT_ID_CAMERA, Common_Movement_WalkDown)
	waitmovement(0)
	applymovement(OBJ_EVENT_ID_CAMERA, Common_Movement_WalkDown)
	waitmovement(0)
	special(RemoveCameraObject)
	return
}

script EventScript_Shop_General {
	lock
	faceplayer
	if (flag(FLAG_TIM_INTRO) == false) {
		msgbox("{COLOR BLUE}???{COLOR DARK_GRAY}: New challenger, huh?\nThe name's Tim Johnson.\p{COLOR BLUE}Tim{COLOR DARK_GRAY}: I run this store, sponsored by\nPokémart Incorporated.\lYou can find all sorts of general\lsupplies for your travels.\pHere's a free sample, as a first time\ncustomer!")
		giveitem(ITEM_REPEL)
		setflag(FLAG_TIM_INTRO)
	}
	if ((var(VAR_ZONE) > 20) && (flag(FLAG_TIM_SUPER_POTION_INTRO) == false)) {
		msgbox(format("{COLOR BLUE}Tim{COLOR DARK_GRAY}: Hey! I just wanted to let you know about a new offer we have!\pI'm sure you've heard that if you buy 10 Poké Balls, you'll get a Premier Ball for free?\pWell, I've got a very similar offer for you.\pIf you buy 10 Potions, you'll get a free Super Potion!\pHow's that for a deal?\pAnyways…"))
		setflag(FLAG_TIM_SUPER_POTION_INTRO)
	}
	message("{COLOR BLUE}Tim{COLOR DARK_GRAY}: Welcome to Tim's.\nCan I get you anything?")
	waitmessage
	switch (var(VAR_ZONE)) {
		case 1:
		case 2:
		case 3:
			pokemart(Shop_General_1to3)
		case 4:
		case 5:
		case 6:
		case 7:
			pokemart(Shop_General_4to8)
		case 9:
		case 10:
		case 11:
		case 12:
			if (flag(FLAG_BRUTAL_MODE_ON) == true) {
				pokemart(Shop_General_9to12_Brutal)
			} else {
				pokemart(Shop_General_9to12)
			}
		case 13:
		case 15:
			if (flag(FLAG_BRUTAL_MODE_ON) == true) {
				pokemart(Shop_General_13to15_Brutal)
			} else {
				pokemart(Shop_General_13to15)
			}
		case 16:
		case 17:
		case 18:
		case 20:
		case 21:
		case 22:
		case 23:
		case 24:
		case 25:
			if (flag(FLAG_BRUTAL_MODE_ON) == true) {
				pokemart(Shop_General_16to25_Brutal)
			} else {
				pokemart(Shop_General_16to25)
			}
		case 26:
			if (flag(FLAG_BRUTAL_MODE_ON) == true) {
				pokemart(Shop_General_26to30_Brutal)
			} else {
				pokemart(Shop_General_26to30)
			}
	}
	msgbox("{COLOR BLUE}Tim{COLOR DARK_GRAY}: Have a nice day.", MSGBOX_DEFAULT)
	release
}

mart Shop_General_1to3 {
	ITEM_POKE_BALL
	ITEM_POTION
	ITEM_ANTIDOTE
	ITEM_PARALYZE_HEAL
}

mart Shop_General_4to8 {
	ITEM_POKE_BALL
	ITEM_GREAT_BALL
	ITEM_POTION
	ITEM_SUPER_POTION
	ITEM_ANTIDOTE
	ITEM_PARALYZE_HEAL
	ITEM_AWAKENING
	ITEM_BURN_HEAL
	ITEM_ICE_HEAL
	ITEM_REPEL
}

mart Shop_General_9to12 {
	ITEM_POKE_BALL
	ITEM_GREAT_BALL
	ITEM_POTION
	ITEM_SUPER_POTION
	ITEM_ANTIDOTE
	ITEM_PARALYZE_HEAL
	ITEM_AWAKENING
	ITEM_BURN_HEAL
	ITEM_ICE_HEAL
	ITEM_REPEL
	ITEM_SUPER_REPEL
	ITEM_X_ATTACK
	ITEM_X_DEFENSE
	ITEM_X_SP_ATK
	ITEM_X_SP_DEF
	ITEM_X_SPEED
	ITEM_X_ACCURACY
	ITEM_DIRE_HIT
	ITEM_GUARD_SPEC
}

mart Shop_General_9to12_Brutal {
	ITEM_POKE_BALL
	ITEM_GREAT_BALL
	ITEM_POTION
	ITEM_SUPER_POTION
	ITEM_ANTIDOTE
	ITEM_PARALYZE_HEAL
	ITEM_AWAKENING
	ITEM_BURN_HEAL
	ITEM_ICE_HEAL
	ITEM_REPEL
	ITEM_SUPER_REPEL
}

mart Shop_General_13to15 {
	ITEM_POKE_BALL
	ITEM_GREAT_BALL
	ITEM_ULTRA_BALL
	ITEM_POTION
	ITEM_SUPER_POTION
	ITEM_HYPER_POTION
	ITEM_ANTIDOTE
	ITEM_PARALYZE_HEAL
	ITEM_AWAKENING
	ITEM_BURN_HEAL
	ITEM_ICE_HEAL
	ITEM_REPEL
	ITEM_SUPER_REPEL
	ITEM_X_ATTACK
	ITEM_X_DEFENSE
	ITEM_X_SP_ATK
	ITEM_X_SP_DEF
	ITEM_X_SPEED
	ITEM_X_ACCURACY
	ITEM_DIRE_HIT
	ITEM_GUARD_SPEC
	ITEM_ETHER
}

mart Shop_General_13to15_Brutal {
	ITEM_POKE_BALL
	ITEM_GREAT_BALL
	ITEM_ULTRA_BALL
	ITEM_POTION
	ITEM_SUPER_POTION
	ITEM_HYPER_POTION
	ITEM_ANTIDOTE
	ITEM_PARALYZE_HEAL
	ITEM_AWAKENING
	ITEM_BURN_HEAL
	ITEM_ICE_HEAL
	ITEM_REPEL
	ITEM_SUPER_REPEL
	ITEM_ETHER
}	

mart Shop_General_16to25 {
	ITEM_POKE_BALL
	ITEM_GREAT_BALL
	ITEM_ULTRA_BALL
	ITEM_POTION
	ITEM_SUPER_POTION
	ITEM_HYPER_POTION
	ITEM_REVIVE
	ITEM_ANTIDOTE
	ITEM_PARALYZE_HEAL
	ITEM_AWAKENING
	ITEM_BURN_HEAL
	ITEM_ICE_HEAL
	ITEM_FULL_HEAL
	ITEM_REPEL
	ITEM_SUPER_REPEL
	ITEM_X_ATTACK
	ITEM_X_DEFENSE
	ITEM_X_SP_ATK
	ITEM_X_SP_DEF
	ITEM_X_SPEED
	ITEM_X_ACCURACY
	ITEM_DIRE_HIT
	ITEM_GUARD_SPEC
	ITEM_ETHER
}

mart Shop_General_16to25_Brutal {
	ITEM_POKE_BALL
	ITEM_GREAT_BALL
	ITEM_ULTRA_BALL
	ITEM_POTION
	ITEM_SUPER_POTION
	ITEM_HYPER_POTION
	ITEM_REVIVE
	ITEM_ANTIDOTE
	ITEM_PARALYZE_HEAL
	ITEM_AWAKENING
	ITEM_BURN_HEAL
	ITEM_ICE_HEAL
	ITEM_FULL_HEAL
	ITEM_REPEL
	ITEM_SUPER_REPEL
	ITEM_ETHER
}

mart Shop_General_26to30 {
	ITEM_POKE_BALL
	ITEM_GREAT_BALL
	ITEM_ULTRA_BALL
	ITEM_POTION
	ITEM_SUPER_POTION
	ITEM_HYPER_POTION
	ITEM_ANTIDOTE
	ITEM_PARALYZE_HEAL
	ITEM_AWAKENING
	ITEM_BURN_HEAL
	ITEM_ICE_HEAL
	ITEM_FULL_HEAL
	ITEM_REVIVE
	ITEM_REPEL
	ITEM_SUPER_REPEL
	ITEM_X_ATTACK
	ITEM_X_DEFENSE
	ITEM_X_SP_ATK
	ITEM_X_SP_DEF
	ITEM_X_SPEED
	ITEM_X_ACCURACY
	ITEM_DIRE_HIT
	ITEM_GUARD_SPEC
	ITEM_ETHER
	ITEM_ELIXIR
	ITEM_HP_UP
	ITEM_PROTEIN
	ITEM_IRON
	ITEM_CALCIUM
	ITEM_ZINC
	ITEM_CARBOS
}

mart Shop_General_26to30_Brutal {
	ITEM_POKE_BALL
	ITEM_GREAT_BALL
	ITEM_ULTRA_BALL
	ITEM_POTION
	ITEM_SUPER_POTION
	ITEM_HYPER_POTION
	ITEM_ANTIDOTE
	ITEM_PARALYZE_HEAL
	ITEM_AWAKENING
	ITEM_BURN_HEAL
	ITEM_ICE_HEAL
	ITEM_FULL_HEAL
	ITEM_REVIVE
	ITEM_REPEL
	ITEM_SUPER_REPEL
	ITEM_ETHER
	ITEM_ELIXIR
}

script EventScript_Shop_Unique_Varrick {
	lock
	faceplayer
	if (flag(FLAG_VARRICK_INTRO) == false) {
		msgbox("{COLOR BLUE}???{COLOR DARK_GRAY}: Wowza! Yeetastic! Blamo!\p"
				"My name is Varrick,\n"
				"entrepreneur extraordinaire!\p"
				"{COLOR BLUE}Varrick{COLOR DARK_GRAY}: I pitched this idea to\n"
				"Silph a couple years back,\l"
				"and now it's become a reality!\p"
				"All the random items you can't find\n"
				"in the world, you'll find here!\p"
				"Fantastic evolution stones!\p"
				"Countless Pokéball variations!\p"
				"Delicious Berries!\p"
				"The greatest held item collection\n"
				"you've never seen!\p"
				"Please, enjoy my shop!")
		setflag(FLAG_VARRICK_INTRO)
	}
	message("{COLOR BLUE}Varrick{COLOR DARK_GRAY}: Greetings and salutations!\nWelcome to Silph Unique Item Store!")
	waitmessage
	switch (var(VAR_ZONE)) {
		case 1:
		case 2:
		case 3:
			pokemart(Shop_Unique_Varrick_1to3)
		case 4:
		case 5:
			pokemart(Shop_Unique_Varrick_4to5)
		case 6:
		case 7:
			pokemart(Shop_Unique_Varrick_6to8)
		case 9:
		case 10:
			pokemart(Shop_Unique_Varrick_9to10)
		case 11:
		case 12:
		case 13:
		case 15:
			pokemart(Shop_Unique_Varrick_11to15)
		case 16:
		case 17:
		case 18:
		case 20:
			pokemart(Shop_Unique_Varrick_16to20)
		case 21:
		case 22:
		case 23:
			pokemart(Shop_Unique_Varrick_21to23)
		case 24:
		case 25:
			pokemart(Shop_Unique_Varrick_24to25)
		case 26:
			if (flag(FLAG_BRUTAL_MODE_ON) == true) {
				pokemart(Shop_Unique_Varrick_26to30_Brutal)
			} else {
				pokemart(Shop_Unique_Varrick_26to30)
			}
	}
	msgbox("{COLOR BLUE}Varrick{COLOR DARK_GRAY}: A big thank you from Silph!", MSGBOX_DEFAULT)
	release
}


mart Shop_Unique_Varrick_1to3 {
	ITEM_HEAL_BALL
}

mart Shop_Unique_Varrick_4to5 {
	ITEM_ORAN_BERRY
	ITEM_CHERI_BERRY
	ITEM_CHESTO_BERRY
	ITEM_PECHA_BERRY
	ITEM_RAWST_BERRY
	ITEM_ASPEAR_BERRY
	ITEM_PERSIM_BERRY
	ITEM_HEAL_BALL
}	

mart Shop_Unique_Varrick_6to8 {
	ITEM_ORAN_BERRY
	ITEM_CHERI_BERRY
	ITEM_CHESTO_BERRY
	ITEM_PECHA_BERRY
	ITEM_RAWST_BERRY
	ITEM_ASPEAR_BERRY
	ITEM_PERSIM_BERRY
	ITEM_HEAL_BALL
	ITEM_NET_BALL
	ITEM_NEST_BALL
	ITEM_MUSCLE_BAND
	ITEM_WISE_GLASSES
}	

mart Shop_Unique_Varrick_9to10 {
	ITEM_SITRUS_BERRY
	ITEM_ORAN_BERRY
	ITEM_CHERI_BERRY
	ITEM_CHESTO_BERRY
	ITEM_PECHA_BERRY
	ITEM_RAWST_BERRY
	ITEM_ASPEAR_BERRY
	ITEM_PERSIM_BERRY
	ITEM_HEAL_BALL
	ITEM_NET_BALL
	ITEM_NEST_BALL
	ITEM_DIVE_BALL
	ITEM_REPEAT_BALL
	ITEM_MUSCLE_BAND
	ITEM_WISE_GLASSES
	ITEM_NORMAL_GEM
	ITEM_FIRE_GEM
	ITEM_WATER_GEM
	ITEM_ELECTRIC_GEM
	ITEM_GRASS_GEM
	ITEM_ICE_GEM
	ITEM_FIGHTING_GEM
	ITEM_POISON_GEM
	ITEM_GROUND_GEM
	ITEM_FLYING_GEM
	ITEM_PSYCHIC_GEM
	ITEM_BUG_GEM
	ITEM_ROCK_GEM
	ITEM_GHOST_GEM
	ITEM_DRAGON_GEM
	ITEM_DARK_GEM
	ITEM_STEEL_GEM
	ITEM_FAIRY_GEM
}

mart Shop_Unique_Varrick_11to15 {
	ITEM_MUSCLE_BAND
	ITEM_WISE_GLASSES
	ITEM_SILK_SCARF
	ITEM_CHARCOAL
	ITEM_MYSTIC_WATER
	ITEM_MAGNET
	ITEM_MIRACLE_SEED
	ITEM_NEVER_MELT_ICE
	ITEM_BLACK_BELT
	ITEM_POISON_BARB
	ITEM_SOFT_SAND
	ITEM_SHARP_BEAK
	ITEM_TWISTED_SPOON
	ITEM_SILVER_POWDER
	ITEM_HARD_STONE
	ITEM_SPELL_TAG
	ITEM_DRAGON_FANG
	ITEM_BLACK_GLASSES
	ITEM_METAL_COAT
}

mart Shop_Unique_Varrick_16to20 {
	ITEM_MUSCLE_BAND
	ITEM_WISE_GLASSES
	ITEM_SILK_SCARF
	ITEM_CHARCOAL
	ITEM_MYSTIC_WATER
	ITEM_MAGNET
	ITEM_MIRACLE_SEED
	ITEM_NEVER_MELT_ICE
	ITEM_BLACK_BELT
	ITEM_POISON_BARB
	ITEM_SOFT_SAND
	ITEM_SHARP_BEAK
	ITEM_TWISTED_SPOON
	ITEM_SILVER_POWDER
	ITEM_HARD_STONE
	ITEM_SPELL_TAG
	ITEM_DRAGON_FANG
	ITEM_BLACK_GLASSES
	ITEM_METAL_COAT
	ITEM_SCOPE_LENS
	ITEM_WIDE_LENS
	ITEM_ZOOM_LENS
	ITEM_METRONOME
	ITEM_ROCKY_HELMET
	ITEM_HEAVY_DUTY_BOOTS
	ITEM_SAFETY_GOGGLES
	ITEM_UTILITY_UMBRELLA
}

mart Shop_Unique_Varrick_21to23 {
	ITEM_SITRUS_BERRY
	ITEM_ORAN_BERRY
	ITEM_CHERI_BERRY
	ITEM_CHESTO_BERRY
	ITEM_PECHA_BERRY
	ITEM_RAWST_BERRY
	ITEM_ASPEAR_BERRY
	ITEM_PERSIM_BERRY
	ITEM_MUSCLE_BAND
	ITEM_WISE_GLASSES
	ITEM_SCOPE_LENS
	ITEM_WIDE_LENS
	ITEM_ZOOM_LENS
	ITEM_METRONOME
	ITEM_MIRACLE_SEED
	ITEM_CHARCOAL
	ITEM_MYSTIC_WATER
	ITEM_SILK_SCARF
	ITEM_SHARP_BEAK
	ITEM_MAGNET
	ITEM_SILVER_POWDER
	ITEM_POISON_BARB
	ITEM_TWISTED_SPOON
	ITEM_SOFT_SAND
	ITEM_HARD_STONE
	ITEM_BLACK_GLASSES
	ITEM_BLACK_BELT
	ITEM_SPELL_TAG
	ITEM_DRAGON_FANG
	ITEM_NEVER_MELT_ICE
	ITEM_METAL_COAT
	ITEM_LIGHT_BALL
	ITEM_LEEK
	ITEM_THICK_CLUB
	ITEM_LUCKY_PUNCH
}

mart Shop_Unique_Varrick_24to25 {
	ITEM_SITRUS_BERRY
	ITEM_ORAN_BERRY
	ITEM_CHERI_BERRY
	ITEM_CHESTO_BERRY
	ITEM_PECHA_BERRY
	ITEM_RAWST_BERRY
	ITEM_ASPEAR_BERRY
	ITEM_PERSIM_BERRY
	ITEM_MUSCLE_BAND
	ITEM_WISE_GLASSES
	ITEM_SCOPE_LENS
	ITEM_WIDE_LENS
	ITEM_ZOOM_LENS
	ITEM_METRONOME
	ITEM_MIRACLE_SEED
	ITEM_CHARCOAL
	ITEM_MYSTIC_WATER
	ITEM_SILK_SCARF
	ITEM_SHARP_BEAK
	ITEM_MAGNET
	ITEM_SILVER_POWDER
	ITEM_POISON_BARB
	ITEM_TWISTED_SPOON
	ITEM_SOFT_SAND
	ITEM_HARD_STONE
	ITEM_BLACK_GLASSES
	ITEM_BLACK_BELT
	ITEM_SPELL_TAG
	ITEM_DRAGON_FANG
	ITEM_NEVER_MELT_ICE
	ITEM_METAL_COAT
}

mart Shop_Unique_Varrick_26to30 {
	ITEM_EXP_SHARE
	ITEM_MACHO_BRACE
	ITEM_POWER_WEIGHT
	ITEM_POWER_BRACER
	ITEM_POWER_BELT
	ITEM_POWER_LENS
	ITEM_POWER_BAND
	ITEM_POWER_ANKLET
	ITEM_SITRUS_BERRY
	ITEM_ORAN_BERRY
	ITEM_CHERI_BERRY
	ITEM_CHESTO_BERRY
	ITEM_PECHA_BERRY
	ITEM_RAWST_BERRY
	ITEM_ASPEAR_BERRY
	ITEM_PERSIM_BERRY
	ITEM_NORMAL_GEM
	ITEM_FIRE_GEM
	ITEM_WATER_GEM
	ITEM_ELECTRIC_GEM
	ITEM_GRASS_GEM
	ITEM_ICE_GEM
	ITEM_FIGHTING_GEM
	ITEM_POISON_GEM
	ITEM_GROUND_GEM
	ITEM_FLYING_GEM
	ITEM_PSYCHIC_GEM
	ITEM_BUG_GEM
	ITEM_ROCK_GEM
	ITEM_GHOST_GEM
	ITEM_DRAGON_GEM
	ITEM_DARK_GEM
	ITEM_STEEL_GEM
	ITEM_FAIRY_GEM
	ITEM_EVIOLITE
	ITEM_MUSCLE_BAND
	ITEM_WISE_GLASSES
	ITEM_SCOPE_LENS
	ITEM_WIDE_LENS
	ITEM_ZOOM_LENS
	ITEM_METRONOME
	ITEM_MIRACLE_SEED
	ITEM_CHARCOAL
	ITEM_MYSTIC_WATER
	ITEM_SILK_SCARF
	ITEM_SHARP_BEAK
	ITEM_MAGNET
	ITEM_SILVER_POWDER
	ITEM_POISON_BARB
	ITEM_TWISTED_SPOON
	ITEM_SOFT_SAND
	ITEM_HARD_STONE
	ITEM_BLACK_GLASSES
	ITEM_BLACK_BELT
	ITEM_SPELL_TAG
	ITEM_DRAGON_FANG
	ITEM_NEVER_MELT_ICE
	ITEM_METAL_COAT
}

mart Shop_Unique_Varrick_26to30_Brutal {
	ITEM_EXP_SHARE
	ITEM_SITRUS_BERRY
	ITEM_ORAN_BERRY
	ITEM_CHERI_BERRY
	ITEM_CHESTO_BERRY
	ITEM_PECHA_BERRY
	ITEM_RAWST_BERRY
	ITEM_ASPEAR_BERRY
	ITEM_PERSIM_BERRY
	ITEM_NORMAL_GEM
	ITEM_FIRE_GEM
	ITEM_WATER_GEM
	ITEM_ELECTRIC_GEM
	ITEM_GRASS_GEM
	ITEM_ICE_GEM
	ITEM_FIGHTING_GEM
	ITEM_POISON_GEM
	ITEM_GROUND_GEM
	ITEM_FLYING_GEM
	ITEM_PSYCHIC_GEM
	ITEM_BUG_GEM
	ITEM_ROCK_GEM
	ITEM_GHOST_GEM
	ITEM_DRAGON_GEM
	ITEM_DARK_GEM
	ITEM_STEEL_GEM
	ITEM_FAIRY_GEM
	ITEM_EVIOLITE
	ITEM_MUSCLE_BAND
	ITEM_WISE_GLASSES
	ITEM_SCOPE_LENS
	ITEM_WIDE_LENS
	ITEM_ZOOM_LENS
	ITEM_METRONOME
	ITEM_MIRACLE_SEED
	ITEM_CHARCOAL
	ITEM_MYSTIC_WATER
	ITEM_SILK_SCARF
	ITEM_SHARP_BEAK
	ITEM_MAGNET
	ITEM_SILVER_POWDER
	ITEM_POISON_BARB
	ITEM_TWISTED_SPOON
	ITEM_SOFT_SAND
	ITEM_HARD_STONE
	ITEM_BLACK_GLASSES
	ITEM_BLACK_BELT
	ITEM_SPELL_TAG
	ITEM_DRAGON_FANG
	ITEM_NEVER_MELT_ICE
	ITEM_METAL_COAT
}	

script EventScript_Shop_Unique_ZhuLi {
	lock
	faceplayer
	message("{COLOR BLUE}Zhu Li{COLOR DARK_GRAY}: Welcome to Silph Unique\nItem Store. Care to buy anything?")
	waitmessage
	switch (var(VAR_ZONE)) {
		case 11:
		case 12:
		case 13:
		case 15:
			pokemart(Shop_Unique_ZhuLi_11to15)
		case 16:
		case 17:
		case 18:
		case 20:
			pokemart(Shop_Unique_ZhuLi_16to20)
		case 21:
		case 22:
		case 23:
			pokemart(Shop_Unique_ZhuLi_21to23)
		case 24:
		case 25:
		case 26:
			pokemart(Shop_Unique_ZhuLi_24to30)
	}
	msgbox("{COLOR BLUE}Zhu Li{COLOR DARK_GRAY}: We thank you for your\nbusiness, loyal customer.", MSGBOX_DEFAULT)
	release
}

mart Shop_Unique_ZhuLi_11to15 {
	ITEM_SITRUS_BERRY
	ITEM_ORAN_BERRY
	ITEM_CHERI_BERRY
	ITEM_CHESTO_BERRY
	ITEM_PECHA_BERRY
	ITEM_RAWST_BERRY
	ITEM_ASPEAR_BERRY
	ITEM_PERSIM_BERRY
	ITEM_HEAL_BALL
	ITEM_NET_BALL
	ITEM_DIVE_BALL
	ITEM_NEST_BALL
	ITEM_REPEAT_BALL
	ITEM_NORMAL_GEM
	ITEM_FIRE_GEM
	ITEM_WATER_GEM
	ITEM_ELECTRIC_GEM
	ITEM_GRASS_GEM
	ITEM_ICE_GEM
	ITEM_FIGHTING_GEM
	ITEM_POISON_GEM
	ITEM_GROUND_GEM
	ITEM_FLYING_GEM
	ITEM_PSYCHIC_GEM
	ITEM_BUG_GEM
	ITEM_ROCK_GEM
	ITEM_GHOST_GEM
	ITEM_DRAGON_GEM
	ITEM_DARK_GEM
	ITEM_STEEL_GEM
	ITEM_FAIRY_GEM
}

mart Shop_Unique_ZhuLi_16to20 {
	ITEM_SITRUS_BERRY
	ITEM_ORAN_BERRY
	ITEM_CHERI_BERRY
	ITEM_CHESTO_BERRY
	ITEM_PECHA_BERRY
	ITEM_RAWST_BERRY
	ITEM_ASPEAR_BERRY
	ITEM_PERSIM_BERRY
	ITEM_HEAL_BALL
	ITEM_NET_BALL
	ITEM_DIVE_BALL
	ITEM_NEST_BALL
	ITEM_REPEAT_BALL
	ITEM_WATER_STONE
	ITEM_THUNDER_STONE
	ITEM_FIRE_STONE
	ITEM_SUN_STONE
	ITEM_MOON_STONE
	ITEM_LEAF_STONE
	ITEM_ICE_STONE
	ITEM_SHINY_STONE
	ITEM_DUSK_STONE
	ITEM_DAWN_STONE
	ITEM_WHIPPED_DREAM
	ITEM_SACHET
	ITEM_SWEET_APPLE
	ITEM_TART_APPLE
	ITEM_STRAWBERRY_SWEET
	ITEM_LOVE_SWEET
	ITEM_BERRY_SWEET
	ITEM_CLOVER_SWEET
	ITEM_FLOWER_SWEET
	ITEM_STAR_SWEET
	ITEM_RIBBON_SWEET
	ITEM_NORMAL_GEM
	ITEM_FIRE_GEM
	ITEM_WATER_GEM
	ITEM_ELECTRIC_GEM
	ITEM_GRASS_GEM
	ITEM_ICE_GEM
	ITEM_FIGHTING_GEM
	ITEM_POISON_GEM
	ITEM_GROUND_GEM
	ITEM_FLYING_GEM
	ITEM_PSYCHIC_GEM
	ITEM_BUG_GEM
	ITEM_ROCK_GEM
	ITEM_GHOST_GEM
	ITEM_DRAGON_GEM
	ITEM_DARK_GEM
	ITEM_STEEL_GEM
	ITEM_FAIRY_GEM
}

mart Shop_Unique_ZhuLi_21to23 {
	ITEM_HEAL_BALL
	ITEM_NET_BALL
	ITEM_DIVE_BALL
	ITEM_NEST_BALL
	ITEM_REPEAT_BALL
	ITEM_WATER_STONE
	ITEM_THUNDER_STONE
	ITEM_FIRE_STONE
	ITEM_SUN_STONE
	ITEM_MOON_STONE
	ITEM_LEAF_STONE
	ITEM_ICE_STONE
	ITEM_SHINY_STONE
	ITEM_DUSK_STONE
	ITEM_DAWN_STONE
	ITEM_OVAL_STONE
	ITEM_PRISM_SCALE
	ITEM_DEEP_SEA_SCALE
	ITEM_DEEP_SEA_TOOTH
	ITEM_KINGS_ROCK
	ITEM_GALARICA_CUFF
	ITEM_GALARICA_WREATH
	ITEM_CRACKED_POT
	ITEM_UPGRADE
	ITEM_WHIPPED_DREAM
	ITEM_TART_APPLE
	ITEM_SWEET_APPLE
	ITEM_RED_NECTAR
	ITEM_YELLOW_NECTAR
	ITEM_PINK_NECTAR
	ITEM_PURPLE_NECTAR
}

mart Shop_Unique_ZhuLi_24to30 {
	ITEM_HEAL_BALL
	ITEM_NET_BALL
	ITEM_DIVE_BALL
	ITEM_NEST_BALL
	ITEM_REPEAT_BALL
	ITEM_WATER_STONE
	ITEM_THUNDER_STONE
	ITEM_FIRE_STONE
	ITEM_SUN_STONE
	ITEM_MOON_STONE
	ITEM_LEAF_STONE
	ITEM_ICE_STONE
	ITEM_SHINY_STONE
	ITEM_DUSK_STONE
	ITEM_DAWN_STONE
	ITEM_OVAL_STONE
	ITEM_PROTECTOR
	ITEM_DRAGON_SCALE
	ITEM_ELECTIRIZER
	ITEM_MAGMARIZER
	ITEM_REAPER_CLOTH
	ITEM_RAZOR_FANG
	ITEM_RAZOR_CLAW
	ITEM_DUBIOUS_DISC
	ITEM_PRISM_SCALE
	ITEM_DEEP_SEA_SCALE
	ITEM_DEEP_SEA_TOOTH
	ITEM_KINGS_ROCK
	ITEM_GALARICA_CUFF
	ITEM_GALARICA_WREATH
	ITEM_CRACKED_POT
	ITEM_UPGRADE
	ITEM_WHIPPED_DREAM
	ITEM_TART_APPLE
	ITEM_SWEET_APPLE
	ITEM_RED_NECTAR
	ITEM_YELLOW_NECTAR
	ITEM_PINK_NECTAR
	ITEM_PURPLE_NECTAR
}

script EventScript_Shop_ZhuLiIntro {
	lockall
	applymovement(2, Common_Movement_ExclamationMark)
	applymovement(5, Common_Movement_ExclamationMark)
	playse(SE_PIN)
	waitmovement(0)
	waitse
	getplayerxy(VAR_TEMP_0, VAR_TEMP_1)
	if (var(VAR_TEMP_0) == 20) {
		applymovement(OBJ_EVENT_ID_PLAYER, Common_Movement_WalkUp)
		waitmovement(0)
		applymovement(OBJ_EVENT_ID_PLAYER, Common_Movement_WalkLeft)
		waitmovement(0)
	}
	applymovement(OBJ_EVENT_ID_PLAYER, Common_Movement_WalkUp)
	waitmovement(0)
	applymovement(OBJ_EVENT_ID_PLAYER, Common_Movement_WalkUp)
	waitmovement(0)
	msgbox("{COLOR BLUE}Varrick{COLOR DARK_GRAY}: Fantastic! You've arrived!\nZhu Li, do the thing!")
	msgbox("{COLOR BLUE}Zhu Li{COLOR DARK_GRAY}: Yes, sir.")
	playse(SE_APPLAUSE)
	waitse
	msgbox("{COLOR BLUE}Varrick{COLOR DARK_GRAY}: Zhu Li is my assistant!\pSilph gave me so many items to sell\nthat I practically begged them for\lsome extra help!\pZhu Li, introduce yourself!")
	msgbox("{COLOR BLUE}Zhu Li{COLOR DARK_GRAY}: Yes, sir.\pPleased to meet you, {PLAYER}. I'm-")
	msgbox("{COLOR BLUE}Varrick{COLOR DARK_GRAY}: Alright, we don't have all\nday, Zhu Li! Talk to her if you\lwant to buy consumable items, while\lI'll handle all of the held items!")
	setvar(VAR_ZHULI_INTRO, 1)
	setflag(FLAG_VARRICK_INTRO)
	releaseall
}

script EventScript_Shop_Lelouch {
	lock
	faceplayer
	if (flag(FLAG_LELOUCH_INTRO) == false) {
		msgbox("{COLOR BLUE}???{COLOR DARK_GRAY}: You… What is your name?\p{COLOR BLUE}???{COLOR DARK_GRAY}: {PLAYER}? Now that's a name…\nI haven't heard in…")
		delay(96)
		msgbox("{COLOR BLUE}???{COLOR DARK_GRAY}: You may call me Lelouch.\p{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: I provide a variety of\nservices to improve one's Pokémon.")
		setflag(FLAG_LELOUCH_INTRO)
	}
	if (var(VAR_ZONE) < 6) {
		msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: I demand a special price\nfor my services, one that I see you\lcannot pay. Leave.")
		release
		end
	}
	if (flag(FLAG_LELOUCH_SHARDS_INTRO) == false) {
		msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: I sense…\n"
				"The aura of Shards.\p"
				"There are four types of Shards:\n"
				"Red, Blue, Yellow, and Green,\l"
				"ranked by least to most rare.\p"
				"Each can be exchanged for a certain\n"
				"type of service I provide.\p"
				"Pokémon training costs Red Shards.\p"
				"Move Relearning costs Blue Shards.\p"
				"Move Tutoring costs Yellow Shards.\p"
				"Other services cost Green Shards.\p"
				"I hope they serve you well…")
		setflag(FLAG_LELOUCH_SHARDS_INTRO)
	}
	msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: For the right price…\nWelcome to Lelouch's Special Services.", MSGBOX_DEFAULT)
	multichoice(0, 0, MULTI_LELOUCH_OPTIONS, 0)
	switch (var(VAR_RESULT)) {
		case 0:
			call(EventScript_Shop_Lelouch_Training)
		case 1:
			call(EventScript_Shop_Lelouch_MoveReminder)
		case 2:
			call(EventScript_Shop_Lelouch_MoveTutor)
		case 3:
			call(EventScript_Shop_Lelouch_Other)
	}
	msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Farewell.")
	release
}

text gText_Lelouch_NotEnoughColor {
	"{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: You don't have any Shards\nof that color."
}

text gText_Lelouch_Leave {
	"{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Farewell."
}

script EventScript_Shop_Lelouch_Training {
	checkitem(ITEM_RED_SHARD, 1)
	if (var(VAR_RESULT) == FALSE) {
		msgbox(gText_Lelouch_NotEnoughColor)
		return
	}
	msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Choose which training\nregiment you would like.", MSGBOX_DEFAULT)
	if ((var(VAR_ZONE) < 21) || (flag(FLAG_BRUTAL_MODE_ON) == true)) {
		multichoice(0, 0, MULTI_LELOUCH_EXP_ONLY, 0)
		switch(var(VAR_RESULT)) {
			case 0:
				msgbox(gText_Lelouch_Exp, MSGBOX_YESNO)
				if (var(VAR_RESULT) == YES) {
					special(ChoosePartyMonForTraining)
					waitstate
					if (var(VAR_0x8004) == 1) {
						msgbox(gText_Lelouch_ExpTrainingFinished)
						msgbox(gText_Lelouch_PayRed)
						removeitem(ITEM_RED_SHARD, 1)
					} else {
						msgbox(gText_Lelouch_DidNotTrain)
					}
					return
				}
		}
	} else {
		multichoice(0, 0, MULTI_LELOUCH_EXP_AND_EV, 0)
			switch(var(VAR_RESULT)) {
				case 0:
					msgbox(gText_Lelouch_Exp, MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						special(ChoosePartyMonForTraining)
						waitstate
						if (var(VAR_0x8004) == 1) {
							msgbox(gText_Lelouch_ExpTrainingFinished)
							msgbox(gText_Lelouch_PayRed)
							removeitem(ITEM_RED_SHARD, 1)
						} else {
							msgbox(gText_Lelouch_DidNotTrain)
						}
						return
					}
				case 1:
					msgbox(gText_Lelouch_EV, MSGBOX_YESNO)
					if (var(VAR_RESULT) == YES) {
						special(ChoosePartyMon)
						waitstate
						if (var(VAR_0x8004) == PARTY_NOTHING_CHOSEN) {
							msgbox(gText_Lelouch_DidNotTrain)
						} else {
							specialvar(VAR_RESULT, ScriptGetPartyMonSpecies)
							if (var(VAR_RESULT) == SPECIES_EGG) {
								msgbox("No eggs!")
							} else {
								setvar(VAR_TEMP_F, 0)
								specialvar(VAR_TEMP_0, ScriptGetPartyMonSpecies)
								bufferspeciesname(0, VAR_TEMP_0)
								msgbox(gText_Lelouch_ChooseHPEV, MSGBOX_DEFAULT)
								multichoice(0, 0, MULTI_LELOUCH_EV_NUMBERS, 0)
								switch(var(VAR_RESULT)) {
									case 0:
										setvar(VAR_TEMP_9, 252)
										addvar(VAR_TEMP_F, 252)
									case 1:
										setvar(VAR_TEMP_9, 200)
										addvar(VAR_TEMP_F, 200)
									case 2:
										setvar(VAR_TEMP_9, 100)
										addvar(VAR_TEMP_F, 100)
									case 3:
										setvar(VAR_TEMP_9, 4)
										addvar(VAR_TEMP_F, 4)
									case 4:
										setvar(VAR_TEMP_9, 0)
									case 5:
									case MULTI_B_PRESSED:
										return
								}
								msgbox(gText_Lelouch_ChooseAttackEV, MSGBOX_DEFAULT)
								multichoice(0, 0, MULTI_LELOUCH_EV_NUMBERS, 0)
								switch(var(VAR_RESULT)) {
									case 0:
										setvar(VAR_TEMP_A, 252)
										addvar(VAR_TEMP_F, 252)
									case 1:
										setvar(VAR_TEMP_A, 200)
										addvar(VAR_TEMP_F, 200)
									case 2:
										setvar(VAR_TEMP_A, 100)
										addvar(VAR_TEMP_F, 100)
									case 3:
										setvar(VAR_TEMP_A, 4)
										addvar(VAR_TEMP_F, 4)
									case 4:
										setvar(VAR_TEMP_A, 0)
									case 5:
									case MULTI_B_PRESSED:
										return
								}
								msgbox(gText_Lelouch_ChooseDefenseEV, MSGBOX_DEFAULT)
								multichoice(0, 0, MULTI_LELOUCH_EV_NUMBERS, 0)
								switch(var(VAR_RESULT)) {
									case 0:
										setvar(VAR_TEMP_B, 252)
										addvar(VAR_TEMP_F, 252)
									case 1:
										setvar(VAR_TEMP_B, 200)
										addvar(VAR_TEMP_F, 200)
									case 2:
										setvar(VAR_TEMP_B, 100)
										addvar(VAR_TEMP_F, 100)
									case 3:
										setvar(VAR_TEMP_B, 4)
										addvar(VAR_TEMP_F, 4)
									case 4:
										setvar(VAR_TEMP_B, 0)
									case 5:
									case MULTI_B_PRESSED:
										return
								}
								msgbox(gText_Lelouch_ChooseSpecialAttackEV, MSGBOX_DEFAULT)
								multichoice(0, 0, MULTI_LELOUCH_EV_NUMBERS, 0)
								switch(var(VAR_RESULT)) {
									case 0:
										setvar(VAR_TEMP_C, 252)
										addvar(VAR_TEMP_F, 252)
									case 1:
										setvar(VAR_TEMP_C, 200)
										addvar(VAR_TEMP_F, 200)
									case 2:
										setvar(VAR_TEMP_C, 100)
										addvar(VAR_TEMP_F, 100)
									case 3:
										setvar(VAR_TEMP_C, 4)
										addvar(VAR_TEMP_F, 4)
									case 4:
										setvar(VAR_TEMP_C, 0)
									case 5:
									case MULTI_B_PRESSED:
										return
								}
								msgbox(gText_Lelouch_ChooseSpecialDefenseEV, MSGBOX_DEFAULT)
								multichoice(0, 0, MULTI_LELOUCH_EV_NUMBERS, 0)
								switch(var(VAR_RESULT)) {
									case 0:
										setvar(VAR_TEMP_D, 252)
										addvar(VAR_TEMP_F, 252)
									case 1:
										setvar(VAR_TEMP_D, 200)
										addvar(VAR_TEMP_F, 200)
									case 2:
										setvar(VAR_TEMP_D, 100)
										addvar(VAR_TEMP_F, 100)
									case 3:
										setvar(VAR_TEMP_D, 4)
										addvar(VAR_TEMP_F, 4)
									case 4:
										setvar(VAR_TEMP_D, 0)
									case 5:
									case MULTI_B_PRESSED:
										return
								}
								msgbox(gText_Lelouch_ChooseSpeedEV, MSGBOX_DEFAULT)
								multichoice(0, 0, MULTI_LELOUCH_EV_NUMBERS, 0)
								switch(var(VAR_RESULT)) {
									case 0:
										setvar(VAR_TEMP_E, 252)
										addvar(VAR_TEMP_F, 252)
									case 1:
										setvar(VAR_TEMP_E, 200)
										addvar(VAR_TEMP_F, 200)
									case 2:
										setvar(VAR_TEMP_E, 100)
										addvar(VAR_TEMP_F, 100)
									case 3:
										setvar(VAR_TEMP_E, 4)
										addvar(VAR_TEMP_F, 4)
									case 4:
										setvar(VAR_TEMP_E, 0)
									case 5:
									case MULTI_B_PRESSED:
										return
								}
								if (var(VAR_TEMP_F) > 510) {
									msgbox(gText_Lelouch_TooManyEVs)
									return
								}
								msgbox(gText_Lelouch_CheckEVs, MSGBOX_YESNO)
								if (var(VAR_RESULT) == NO) {
									return
								}
								special(CheckLeadMonCute) // Sets the EVs
								playse(SE_EXP_MAX)
								waitse
								msgbox(gText_Lelouch_ChangedEVs)
								msgbox(gText_Lelouch_PayRed)
								removeitem(ITEM_RED_SHARD, 1)
							}
						}
						return
					}
			}
	}

	return
}

text gText_Lelouch_EV {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: With EV Training, you can set one Pokémon's EVs at the cost of one Red Shard.\pWould you like to start an EV Training session?")
}

text gText_Lelouch_ChooseHPEV {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: What would you like your {STR_VAR_1}'s HP EV to be?")
}

text gText_Lelouch_ChooseAttackEV {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: What would you like your {STR_VAR_1}'s Attack EV to be?")
}

text gText_Lelouch_ChooseDefenseEV {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: What would you like your {STR_VAR_1}'s Defense EV to be?")
}

text gText_Lelouch_ChooseSpecialAttackEV {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: What would you like your {STR_VAR_1}'s Sp. Atk EV to be?")
}

text gText_Lelouch_ChooseSpecialDefenseEV {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: What would you like your {STR_VAR_1}'s Sp. Def EV to be?")
}

text gText_Lelouch_ChooseSpeedEV {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: What would you like your {STR_VAR_1}'s Speed EV to be?")
}

text gText_Lelouch_TooManyEVs {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: You've selected a total of EVs greater than 510. Pokémon can have at maximum 510 EVs.")
}

text gText_Lelouch_CheckEVs {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Are you sure you wish to set {STR_VAR_1}'s EVs to these values?")
}

text gText_Lelouch_ChangedEVs {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: I've changed your {STR_VAR_1}'s EVs to your requested values.")
}

script EventScript_Shop_Lelouch_MoveReminder {
	checkitem(ITEM_BLUE_SHARD, 1)
	if (var(VAR_RESULT) == FALSE) {
		msgbox(gText_Lelouch_NotEnoughColor)
		return
	}
	msgbox(gText_Lelouch_CostsBlueShards, MSGBOX_YESNO)
	if (var(VAR_RESULT) == NO) {
		return
	}
	while {
		msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Which Pokémon should\nrelearn a move?", MSGBOX_DEFAULT)
		special(ChooseMonForMoveRelearner)
		waitstate
		if (var(VAR_0x8004) == 255) {
			return
		}
		special(IsSelectedMonEgg)
		if (var(VAR_RESULT) == TRUE) {
			msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: That is an Egg.", MSGBOX_DEFAULT)
			continue
		}
		if (var(VAR_0x8005) == 0) {
			msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: That Pokémon cannot\nrelearn any moves.", MSGBOX_DEFAULT)
			continue
		}
		msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Which move should it\nrelearn?", MSGBOX_DEFAULT)
		special(TeachMoveRelearnerMove)
		waitstate
		if (var(VAR_0x8004) == 0) {
			continue
		}
		msgbox(gText_Lelouch_PayBlue)
		removeitem(ITEM_BLUE_SHARD)
		break
	}
	return
}

script EventScript_Shop_Lelouch_MoveTutor {
	checkitem(ITEM_YELLOW_SHARD, 1)
	if (var(VAR_RESULT) == FALSE) {
		msgbox(gText_Lelouch_NotEnoughColor)
		return
	}
	while {
		msgbox(gText_Lelouch_CostsYellowShards, MSGBOX_DEFAULT)
		if (var(VAR_ZONE) > 30) {
			scrollingmultichoice(5, 0, 0, 5, TRUE)
			switch (var(VAR_RESULT)) {
				case 0:
					setvar(VAR_TEMP_0, MOVE_ICY_WIND)
					setvar(VAR_0x8005, TUTOR_MOVE_ICY_WIND)
				case 1:
					setvar(VAR_TEMP_0, MOVE_GRASS_KNOT)
					setvar(VAR_0x8005, TUTOR_MOVE_GRASS_KNOT)
				case 2:
					setvar(VAR_TEMP_0, MOVE_LOW_KICK)
					setvar(VAR_0x8005, TUTOR_MOVE_LOW_KICK)
				case 3:
					setvar(VAR_TEMP_0, MOVE_HEAL_BELL)
					setvar(VAR_0x8005, TUTOR_MOVE_HEAL_BELL)
				case 4:
					setvar(VAR_TEMP_0, MOVE_HELPING_HAND)
					setvar(VAR_0x8005, TUTOR_MOVE_HELPING_HAND)
				case 5:
					setvar(VAR_TEMP_0, MOVE_SLEEP_TALK)
					setvar(VAR_0x8005, TUTOR_MOVE_SLEEP_TALK)
				case 6:
					setvar(VAR_TEMP_0, MOVE_STEALTH_ROCK)
					setvar(VAR_0x8005, TUTOR_MOVE_STEALTH_ROCK)
				case 7:
					setvar(VAR_TEMP_0, MOVE_TAUNT)
					setvar(VAR_0x8005, TUTOR_MOVE_TAUNT)
				case 8:
					setvar(VAR_TEMP_0, MOVE_FIRE_PUNCH)
					setvar(VAR_0x8005, TUTOR_MOVE_FIRE_PUNCH)
				case 9:
					setvar(VAR_TEMP_0, MOVE_ICE_PUNCH)
					setvar(VAR_0x8005, TUTOR_MOVE_ICE_PUNCH)
				case 10:
					setvar(VAR_TEMP_0, MOVE_THUNDER_PUNCH)
					setvar(VAR_0x8005, TUTOR_MOVE_THUNDER_PUNCH)
				case 11:
					setvar(VAR_TEMP_0, MOVE_FLIP_TURN)
					setvar(VAR_0x8005, TUTOR_MOVE_FLIP_TURN)
				case 12:
					setvar(VAR_TEMP_0, MOVE_U_TURN)
					setvar(VAR_0x8005, TUTOR_MOVE_U_TURN)
				case 13:
					setvar(VAR_TEMP_0, MOVE_DEFOG)
					setvar(VAR_0x8005, TUTOR_MOVE_DEFOG)
				case 14:
					setvar(VAR_TEMP_0, MOVE_PAIN_SPLIT)
					setvar(VAR_0x8005, TUTOR_MOVE_PAIN_SPLIT)
				case 15:
					setvar(VAR_TEMP_0, MOVE_TRICK)
					setvar(VAR_0x8005, TUTOR_MOVE_TRICK)
				case 16:
					setvar(VAR_TEMP_0, MOVE_BOUNCE)
					setvar(VAR_0x8005, TUTOR_MOVE_BOUNCE)
				case 17:
					setvar(VAR_TEMP_0, MOVE_IRON_HEAD)
					setvar(VAR_0x8005, TUTOR_MOVE_IRON_HEAD)
				case 18:
					setvar(VAR_TEMP_0, MOVE_KNOCK_OFF)
					setvar(VAR_0x8005, TUTOR_MOVE_KNOCK_OFF)
				case 19:
					setvar(VAR_TEMP_0, MOVE_VOLT_SWITCH)
					setvar(VAR_0x8005, TUTOR_MOVE_VOLT_SWITCH)
				case 20:
					setvar(VAR_TEMP_0, MOVE_ZEN_HEADBUTT)
					setvar(VAR_0x8005, TUTOR_MOVE_ZEN_HEADBUTT)
				case 21:
					setvar(VAR_TEMP_0, MOVE_ROOST)
					setvar(VAR_0x8005, TUTOR_MOVE_ROOST)
				case 22:
					setvar(VAR_TEMP_0, MOVE_SYNTHESIS)
					setvar(VAR_0x8005, TUTOR_MOVE_SYNTHESIS)
				case 23:
					setvar(VAR_TEMP_0, MOVE_TAILWIND)
					setvar(VAR_0x8005, TUTOR_MOVE_TAILWIND)
				case 24:
					setvar(VAR_TEMP_0, MOVE_DRACO_METEOR)
					setvar(VAR_0x8005, TUTOR_MOVE_DRACO_METEOR)
				case 25:
					setvar(VAR_TEMP_0, MOVE_EXPANDING_FORCE)
					setvar(VAR_0x8005, TUTOR_MOVE_EXPANDING_FORCE)
				case 26:
					setvar(VAR_TEMP_0, MOVE_HEAT_WAVE)
					setvar(VAR_0x8005, TUTOR_MOVE_HEAT_WAVE)
				case 27:
					setvar(VAR_TEMP_0, MOVE_POLTERGEIST)
					setvar(VAR_0x8005, TUTOR_MOVE_POLTERGEIST)
				case 28:
					setvar(VAR_TEMP_0, MOVE_POWER_WHIP)
					setvar(VAR_0x8005, TUTOR_MOVE_POWER_WHIP)
				case 29:
					setvar(VAR_TEMP_0, MOVE_SUPERPOWER)
					setvar(VAR_0x8005, TUTOR_MOVE_SUPERPOWER)
				case 30:
					setvar(VAR_TEMP_0, MOVE_SWORDS_DANCE)
					setvar(VAR_0x8005, TUTOR_MOVE_SWORDS_DANCE)
				case 31:
					setvar(VAR_TEMP_0, MOVE_NASTY_PLOT)
					setvar(VAR_0x8005, TUTOR_MOVE_NASTY_PLOT)
				case MULTI_B_PRESSED:
					return
			}
		} elif (var(VAR_ZONE) > 20) {
			scrollingmultichoice(4, 0, 0, 5, TRUE)
			switch (var(VAR_RESULT)) {
				case 0:
					setvar(VAR_TEMP_0, MOVE_ICY_WIND)
					setvar(VAR_0x8005, TUTOR_MOVE_ICY_WIND)
				case 1:
					setvar(VAR_TEMP_0, MOVE_GRASS_KNOT)
					setvar(VAR_0x8005, TUTOR_MOVE_GRASS_KNOT)
				case 2:
					setvar(VAR_TEMP_0, MOVE_LOW_KICK)
					setvar(VAR_0x8005, TUTOR_MOVE_LOW_KICK)
				case 3:
					setvar(VAR_TEMP_0, MOVE_HEAL_BELL)
					setvar(VAR_0x8005, TUTOR_MOVE_HEAL_BELL)
				case 4:
					setvar(VAR_TEMP_0, MOVE_HELPING_HAND)
					setvar(VAR_0x8005, TUTOR_MOVE_HELPING_HAND)
				case 5:
					setvar(VAR_TEMP_0, MOVE_SLEEP_TALK)
					setvar(VAR_0x8005, TUTOR_MOVE_SLEEP_TALK)
				case 6:
					setvar(VAR_TEMP_0, MOVE_STEALTH_ROCK)
					setvar(VAR_0x8005, TUTOR_MOVE_STEALTH_ROCK)
				case 7:
					setvar(VAR_TEMP_0, MOVE_TAUNT)
					setvar(VAR_0x8005, TUTOR_MOVE_TAUNT)
				case 8:
					setvar(VAR_TEMP_0, MOVE_FIRE_PUNCH)
					setvar(VAR_0x8005, TUTOR_MOVE_FIRE_PUNCH)
				case 9:
					setvar(VAR_TEMP_0, MOVE_ICE_PUNCH)
					setvar(VAR_0x8005, TUTOR_MOVE_ICE_PUNCH)
				case 10:
					setvar(VAR_TEMP_0, MOVE_THUNDER_PUNCH)
					setvar(VAR_0x8005, TUTOR_MOVE_THUNDER_PUNCH)
				case 11:
					setvar(VAR_TEMP_0, MOVE_FLIP_TURN)
					setvar(VAR_0x8005, TUTOR_MOVE_FLIP_TURN)
				case 12:
					setvar(VAR_TEMP_0, MOVE_U_TURN)
					setvar(VAR_0x8005, TUTOR_MOVE_U_TURN)
				case 13:
					setvar(VAR_TEMP_0, MOVE_DEFOG)
					setvar(VAR_0x8005, TUTOR_MOVE_DEFOG)
				case 14:
					setvar(VAR_TEMP_0, MOVE_PAIN_SPLIT)
					setvar(VAR_0x8005, TUTOR_MOVE_PAIN_SPLIT)
				case 15:
					setvar(VAR_TEMP_0, MOVE_TRICK)
					setvar(VAR_0x8005, TUTOR_MOVE_TRICK)
				case 16:
					setvar(VAR_TEMP_0, MOVE_BOUNCE)
					setvar(VAR_0x8005, TUTOR_MOVE_BOUNCE)
				case 17:
					setvar(VAR_TEMP_0, MOVE_IRON_HEAD)
					setvar(VAR_0x8005, TUTOR_MOVE_IRON_HEAD)
				case 18:
					setvar(VAR_TEMP_0, MOVE_KNOCK_OFF)
					setvar(VAR_0x8005, TUTOR_MOVE_KNOCK_OFF)
				case 19:
					setvar(VAR_TEMP_0, MOVE_VOLT_SWITCH)
					setvar(VAR_0x8005, TUTOR_MOVE_VOLT_SWITCH)
				case 20:
					setvar(VAR_TEMP_0, MOVE_ZEN_HEADBUTT)
					setvar(VAR_0x8005, TUTOR_MOVE_ZEN_HEADBUTT)
				case 21:
					setvar(VAR_TEMP_0, MOVE_ROOST)
					setvar(VAR_0x8005, TUTOR_MOVE_ROOST)
				case 22:
					setvar(VAR_TEMP_0, MOVE_SYNTHESIS)
					setvar(VAR_0x8005, TUTOR_MOVE_SYNTHESIS)
				case 23:
					setvar(VAR_TEMP_0, MOVE_TAILWIND)
					setvar(VAR_0x8005, TUTOR_MOVE_TAILWIND)
				case MULTI_B_PRESSED:
					return
			}
		} elif (var(VAR_ZONE) > 15) {
			scrollingmultichoice(3, 0, 0, 5, TRUE)
			switch (var(VAR_RESULT)) {
				case 0:
					setvar(VAR_TEMP_0, MOVE_ICY_WIND)
					setvar(VAR_0x8005, TUTOR_MOVE_ICY_WIND)
				case 1:
					setvar(VAR_TEMP_0, MOVE_GRASS_KNOT)
					setvar(VAR_0x8005, TUTOR_MOVE_GRASS_KNOT)
				case 2:
					setvar(VAR_TEMP_0, MOVE_LOW_KICK)
					setvar(VAR_0x8005, TUTOR_MOVE_LOW_KICK)
				case 3:
					setvar(VAR_TEMP_0, MOVE_HEAL_BELL)
					setvar(VAR_0x8005, TUTOR_MOVE_HEAL_BELL)
				case 4:
					setvar(VAR_TEMP_0, MOVE_HELPING_HAND)
					setvar(VAR_0x8005, TUTOR_MOVE_HELPING_HAND)
				case 5:
					setvar(VAR_TEMP_0, MOVE_SLEEP_TALK)
					setvar(VAR_0x8005, TUTOR_MOVE_SLEEP_TALK)
				case 6:
					setvar(VAR_TEMP_0, MOVE_STEALTH_ROCK)
					setvar(VAR_0x8005, TUTOR_MOVE_STEALTH_ROCK)
				case 7:
					setvar(VAR_TEMP_0, MOVE_TAUNT)
					setvar(VAR_0x8005, TUTOR_MOVE_TAUNT)
				case 8:
					setvar(VAR_TEMP_0, MOVE_FIRE_PUNCH)
					setvar(VAR_0x8005, TUTOR_MOVE_FIRE_PUNCH)
				case 9:
					setvar(VAR_TEMP_0, MOVE_ICE_PUNCH)
					setvar(VAR_0x8005, TUTOR_MOVE_ICE_PUNCH)
				case 10:
					setvar(VAR_TEMP_0, MOVE_THUNDER_PUNCH)
					setvar(VAR_0x8005, TUTOR_MOVE_THUNDER_PUNCH)
				case 11:
					setvar(VAR_TEMP_0, MOVE_FLIP_TURN)
					setvar(VAR_0x8005, TUTOR_MOVE_FLIP_TURN)
				case 12:
					setvar(VAR_TEMP_0, MOVE_U_TURN)
					setvar(VAR_0x8005, TUTOR_MOVE_U_TURN)
				case 13:
					setvar(VAR_TEMP_0, MOVE_DEFOG)
					setvar(VAR_0x8005, TUTOR_MOVE_DEFOG)
				case 14:
					setvar(VAR_TEMP_0, MOVE_PAIN_SPLIT)
					setvar(VAR_0x8005, TUTOR_MOVE_PAIN_SPLIT)
				case 15:
					setvar(VAR_TEMP_0, MOVE_TRICK)
					setvar(VAR_0x8005, TUTOR_MOVE_TRICK)
				case MULTI_B_PRESSED:
					return
			}
		} else {
			scrollingmultichoice(2, 0, 0, 5, TRUE)
			switch (var(VAR_RESULT)) {
				case 0:
					setvar(VAR_TEMP_0, MOVE_ICY_WIND)
					setvar(VAR_0x8005, TUTOR_MOVE_ICY_WIND)
				case 1:
					setvar(VAR_TEMP_0, MOVE_GRASS_KNOT)
					setvar(VAR_0x8005, TUTOR_MOVE_GRASS_KNOT)
				case 2:
					setvar(VAR_TEMP_0, MOVE_LOW_KICK)
					setvar(VAR_0x8005, TUTOR_MOVE_LOW_KICK)
				case 3:
					setvar(VAR_TEMP_0, MOVE_HEAL_BELL)
					setvar(VAR_0x8005, TUTOR_MOVE_HEAL_BELL)
				case 4:
					setvar(VAR_TEMP_0, MOVE_HELPING_HAND)
					setvar(VAR_0x8005, TUTOR_MOVE_HELPING_HAND)
				case 5:
					setvar(VAR_TEMP_0, MOVE_SLEEP_TALK)
					setvar(VAR_0x8005, TUTOR_MOVE_SLEEP_TALK)
				case 6:
					setvar(VAR_TEMP_0, MOVE_STEALTH_ROCK)
					setvar(VAR_0x8005, TUTOR_MOVE_STEALTH_ROCK)
				case 7:
					setvar(VAR_TEMP_0, MOVE_TAUNT)
					setvar(VAR_0x8005, TUTOR_MOVE_TAUNT)
				case MULTI_B_PRESSED:
					return
			}
		}
		buffermovename(0, VAR_TEMP_0)
		msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: You want to teach the move\n{STR_VAR_1}?", MSGBOX_YESNO)
		if (var(VAR_RESULT) == NO) {
			continue
		}
		msgbox("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Which Pokemon should learn\n{STR_VAR_1}?", MSGBOX_DEFAULT)
		// setvar(VAR_0x8005, VAR_TEMP_1)
		call(MoveTutor_EventScript_OpenPartyMenu)
		if (var(VAR_RESULT) == 0) {
			return
		}
		msgbox(gText_Lelouch_PayYellow1, MSGBOX_DEFAULT)
		removeitem(ITEM_YELLOW_SHARD)
		return
	}

}

script EventScript_Shop_Lelouch_Other {
	checkitem(ITEM_GREEN_SHARD, 1)
	if (var(VAR_RESULT) == FALSE) {
		msgbox(gText_Lelouch_NotEnoughColor)
		return
	}
	msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: I offer nature changing services at the cost of one Green Shard.\pFirst, choose a Pokémon."))
	special(ChoosePartyMon)
	waitstate
	if (var(VAR_0x8004) == PARTY_NOTHING_CHOSEN) {
		return
	} else {
		specialvar(VAR_RESULT, ScriptGetPartyMonSpecies)
		if (var(VAR_RESULT) == SPECIES_EGG) {
			msgbox("No eggs!")
		} else {
			specialvar(VAR_TEMP_1, ScriptGetPartyMonSpecies)
			bufferspeciesname(0, VAR_TEMP_1)
			copyvar(VAR_TEMP_1, VAR_0x8004)
			msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: Which nature would you like your {STR_VAR_1} to have?"), MSGBOX_DEFAULT)
			scrollingmultichoice(6, 0, 0, 6, TRUE)
			switch (var(VAR_RESULT)) {
				case 0:
					setvar(VAR_TEMP_0, 1)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Lonely, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 1:
					setvar(VAR_TEMP_0, 3)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Adamant, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 2:
					setvar(VAR_TEMP_0, 4)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Naughty, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 3:
					setvar(VAR_TEMP_0, 2)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Brave, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 4:
					setvar(VAR_TEMP_0, 5)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Bold, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 5:
					setvar(VAR_TEMP_0, 8)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Impish, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 6:
					setvar(VAR_TEMP_0, 9)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Lax, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 7:
					setvar(VAR_TEMP_0, 7)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Relaxed, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 8:
					setvar(VAR_TEMP_0, 15)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Modest, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 9:
					setvar(VAR_TEMP_0, 16)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Mild, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 10:
					setvar(VAR_TEMP_0, 19)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Rash, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 11:
					setvar(VAR_TEMP_0, 17)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Quiet, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 12:
					setvar(VAR_TEMP_0, 20)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Calm, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 13:
					setvar(VAR_TEMP_0, 21)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Gentle, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 14:
					setvar(VAR_TEMP_0, 23)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Careful, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 15:
					setvar(VAR_TEMP_0, 22)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Sassy, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 16:
					setvar(VAR_TEMP_0, 10)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Timid, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 17:
					setvar(VAR_TEMP_0, 11)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Hasty, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 18:
					setvar(VAR_TEMP_0, 13)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Jolly, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 19:
					setvar(VAR_TEMP_0, 14)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Naive, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case 20:
					setvar(VAR_TEMP_0, 12)
					msgbox(format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: If you'd like to change your {STR_VAR_1}'s nature to Serious, it will cost one Green Shard."), MSGBOX_YESNO)
					if (var(VAR_RESULT) == NO) {
						return
					}
				case MULTI_B_PRESSED:
					return
			}
			playse(SE_EXP_MAX)
			waitse
			msgbox(gText_Lelouch_ChangedNature)
			special(CheckLeadMonSmart) // sets the nature
			msgbox(gText_Lelouch_PayGreen)
			removeitem(ITEM_GREEN_SHARD, 1)
		}
	}
	return
}

text gText_Lelouch_ChangedNature {
	format("{COLOR BLUE}Lelouch{COLOR DARK_GRAY}: I've changed your {STR_VAR_1}'s nature to the requested nature.")
}

script EventScript_Shop_Joy {
	lock
	faceplayer
	if (flag(FLAG_JOY_INTRO) == false) {
		setflag(FLAG_JOY_INTRO)
		msgbox("{COLOR BLUE}???{COLOR DARK_GRAY}: Welcome to the Pokémon…\nUgh. Never mind.\p{COLOR BLUE}???{COLOR DARK_GRAY}: My name is Joy. Just Joy.\p{COLOR BLUE}Joy{COLOR DARK_GRAY}: I used to work at the\nPokémon Center, but they gave\lterrible pay.\pSo I've started my own shop,\nJoy's Healing Shop!")
	}
	msgbox("{COLOR BLUE}Joy{COLOR DARK_GRAY}: Welcome to Joy's Healing Shop.\pWe heal your entire party for a\nflat ¥1000 fee.")
	showmoneybox(0, 0, 0)
	msgbox("{COLOR BLUE}Joy{COLOR DARK_GRAY}: Should I heal your Pokémon?", MSGBOX_YESNO)
	if (var(VAR_RESULT) == NO) {
		closemessage
		hidemoneybox
	} else {
		checkmoney(1000, 0)
		if (var(VAR_RESULT) == FALSE) {
			msgbox("{COLOR BLUE}Joy{COLOR DARK_GRAY}: You don't have enough money.")
			hidemoneybox
		} else {
			removemoney(1000, 0)
			updatemoneybox
			msgbox("{COLOR BLUE}Joy{COLOR DARK_GRAY}: That will be ¥1000, thank you…")
			fadescreen(FADE_TO_BLACK)
			playfanfare(MUS_HEAL)
			waitfanfare
			special(HealPlayerParty)
			fadescreen(FADE_FROM_BLACK)
			msgbox("{COLOR BLUE}Joy{COLOR DARK_GRAY}: Your party has been restored.")
			closemessage
			hidemoneybox
		}
	}
	msgbox("{COLOR BLUE}Joy{COLOR DARK_GRAY}: See you next time.")
	release
	end
}

script EventScript_BrutalExitNotSatisfied {
	buffernumberstring(0, VAR_NUM_TRAINERS_REMAINING)
	msgbox(format("You haven't defeated all the opponents in the area yet."))
	switch(var(VAR_NUM_TRAINERS_REMAINING)) {
		case 1:
			msgbox(gText_OneOpponentRemaining)
		default:
			msgbox(gText_MultipleOpponentsRemaining)
	}
	applymovement(OBJ_EVENT_ID_PLAYER, Common_Movement_WalkDown)
	waitmovement(0)
	releaseall
}

script EventScript_Max {
	lock
	faceplayer
	if (flag(FLAG_MAX_INTRO) == false) {
		msgbox(format("{COLOR BLUE}???{COLOR DARK_GRAY}: By my calculations, you should be {PLAYER}!\pHi, {PLAYER}! My name is {COLOR BLUE}Max{COLOR DARK_GRAY}."))
		msgbox(format("{COLOR BLUE}Max{COLOR DARK_GRAY}: I am a traveling merchant, selling special Technical Machines for you to use!\pI travel a lot, never going to the same place again.\pI'll have different wares every time you see me, so be sure to buy whatever TMs you deem important!"))
		setflag(FLAG_MAX_INTRO)
	}
	message(format("{COLOR BLUE}Max{COLOR DARK_GRAY}: Hi {PLAYER}! Long time no see!\pWelcome to my TM shop!"))
	waitmessage
	switch(var(VAR_ZONE)) {
		case 3:
			pokemart(Zone3A_Shop_TMShop)
		case 6:
			pokemart(Zone6A_Shop_TMShop)
		case 7:
			pokemart(Zone7A_Shop_TMShop)
		case 10:
			pokemart(Zone10A_Shop_TMShop)
	}
	msgbox(format("{COLOR BLUE}Max{COLOR DARK_GRAY}: Goodbye!"))
	release
}

mart Zone3A_Shop_TMShop {
	ITEM_TM01
}

mart Zone6A_Shop_TMShop {
	ITEM_TM05
	ITEM_TM06
}

mart Zone7A_Shop_TMShop {
	ITEM_TM09
	ITEM_TM10
	ITEM_TM11
}

mart Zone10A_Shop_TMShop {
	ITEM_TM17
	ITEM_TM18
	ITEM_TM19
}

script EventScript_LeavingSetup {
	setflag(FLAG_IN_NEW_ZONE)
	msgbox("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Bring out the strength of you\nand your Pokémon!")
	getplayerxy(VAR_TEMP_0, VAR_TEMP_1)
	if (var(VAR_TEMP_0) == 21) {
		applymovement(1, Common_Movement_WalkRight)
		applymovement(OBJ_EVENT_ID_PLAYER, Common_Movement_WalkRight)
		waitmovement(0)
		applymovement(1, Common_Movement_FaceLeft)
		waitmovement(0)
	}
	if (var(VAR_TEMP_0) == 22) {
		applymovement(1, Common_Movement_WalkLeft)
		applymovement(OBJ_EVENT_ID_PLAYER, Common_Movement_WalkUp)
		waitmovement(0)
		applymovement(1, Common_Movement_FaceRight)
		waitmovement(0)
	}
	if (var(VAR_TEMP_0) == 23) {
		applymovement(1, Common_Movement_WalkLeft)
		applymovement(OBJ_EVENT_ID_PLAYER, Common_Movement_WalkLeft)
		waitmovement(0)
		applymovement(1, Common_Movement_FaceRight)
		waitmovement(0)
	}
	applymovement(OBJ_EVENT_ID_PLAYER, Common_Movement_WalkUp)
	waitmovement(0)
	return
}

script EventScript_WhenUReady {
	if (var(VAR_ZONE) == 7) {
		msgbox(Zone6Sanctuary_Text_Colress_WhenUReady)
		release
	} elif (var(VAR_ZONE) == 13) {
		msgbox(Zone12Sanctuary_Text_Colress_WhenUReady)
		release
	} elif (var(VAR_ZONE) == 18) {
		goto(Zone17Sanctuary_EventScript_WhenUReady)
	} elif (var(VAR_ZONE) == 24) {
		goto(Zone23Sanctuary_EventScript_WhenUReady)
	} else {
		buffernumberstring(0, VAR_ZONE)
		msgbox(gText_Colress_WhenUReady, MSGBOX_AUTOCLOSE)
		release
	}
}

script EventScript_SanctuaryToZone0 {
	lockall
	warpteleport(MAP_ZONE0A, 255, 17, 10)
	waitstate
}

script EventScript_Documentation {
	msgbox(gText_Version)
	goto(EventScript_WhenUReady)
}

script EventScript_Settings {
	setvar(VAR_TEMP_1, 0)
	while (var(VAR_TEMP_1) == 0) {
		if ((flag(FLAG_BRUTAL_MODE_ON) == true) && (flag(FLAG_NUZLOCKE_ON) == true) && (flag(FLAG_RANDOMIZER_ON) == true)) {
			msgbox("You are currently playing on\n{COLOR RED}Brutal{COLOR DARK_GRAY} difficulty,\l{COLOR RED}Randomlocke{COLOR DARK_GRAY} mode.", MSGBOX_DEFAULT)
			multichoice(21, 0, MULTI_COLRESS_SETTINGS, FALSE)
			switch (var(VAR_RESULT)) {
				case 0:
					call(EventScript_Settings_BrutalMode)
				case 1:
					call(EventScript_Settings_NuzlockeRandomizer)
				case 2:
					call(EventScript_MusicMenu)
				case 3:
					call(EventScript_ExpAll)
				case 4:
					call(EventScript_Surveillance)
				case 5:
				case MULTI_B_PRESSED:
					setvar(VAR_TEMP_1, 1)
			}
		} elif ((flag(FLAG_BRUTAL_MODE_ON) == false) && (flag(FLAG_NUZLOCKE_ON) == true) && (flag(FLAG_RANDOMIZER_ON) == true)) {
			msgbox("You are currently playing on\n{COLOR RED}Default{COLOR DARK_GRAY} difficulty,\l{COLOR RED}Randomlocke{COLOR DARK_GRAY} mode.", MSGBOX_DEFAULT)
			multichoice(21, 0, MULTI_COLRESS_SETTINGS, FALSE)
			switch (var(VAR_RESULT)) {
				case 0:
					msgbox(gText_Colress_DefaultExplained)
				case 1:
					call(EventScript_Settings_NuzlockeRandomizer)
				case 2:
					call(EventScript_MusicMenu)
				case 3:
					call(EventScript_ExpAll)
				case 4:
					call(EventScript_Surveillance)
				case 5:
				case MULTI_B_PRESSED:
					setvar(VAR_TEMP_1, 1)
			}
		} elif ((flag(FLAG_BRUTAL_MODE_ON) == true) && (flag(FLAG_NUZLOCKE_ON) == false) && (flag(FLAG_RANDOMIZER_ON) == true)) {
			msgbox("You are currently playing on\n{COLOR RED}Brutal{COLOR DARK_GRAY} difficulty,\l{COLOR RED}Randomizer{COLOR DARK_GRAY} mode.", MSGBOX_DEFAULT)
			multichoice(21, 0, MULTI_COLRESS_SETTINGS, FALSE)
			switch (var(VAR_RESULT)) {
				case 0:
					call(EventScript_Settings_BrutalMode)
				case 1:
					msgbox(gText_Colress_RandomizerExplanation)
				case 2:
					call(EventScript_MusicMenu)
				case 3:
					call(EventScript_ExpAll)
				case 4:
					call(EventScript_Surveillance)
				case 5:
				case MULTI_B_PRESSED:
					setvar(VAR_TEMP_1, 1)
			}
		} elif ((flag(FLAG_BRUTAL_MODE_ON) == false) && (flag(FLAG_NUZLOCKE_ON) == false) && (flag(FLAG_RANDOMIZER_ON) == true)) {
			msgbox("You are currently playing on\n{COLOR RED}Default{COLOR DARK_GRAY} difficulty,\l{COLOR RED}Randomizer{COLOR DARK_GRAY} mode.", MSGBOX_DEFAULT)
			multichoice(21, 0, MULTI_COLRESS_SETTINGS, FALSE)
			switch (var(VAR_RESULT)) {
				case 0:
					msgbox(gText_Colress_DefaultExplained)
				case 1:
					msgbox(gText_Colress_RandomizerExplanation)
				case 2:
					call(EventScript_MusicMenu)
				case 3:
					call(EventScript_ExpAll)
				case 4:
					call(EventScript_Surveillance)
				case 5:
				case MULTI_B_PRESSED:
					setvar(VAR_TEMP_1, 1)
			}
		} elif ((flag(FLAG_BRUTAL_MODE_ON) == true) && (flag(FLAG_NUZLOCKE_ON) == true) && (flag(FLAG_RANDOMIZER_ON) == false)) {
			msgbox("You are currently playing on\n{COLOR RED}Brutal{COLOR DARK_GRAY} difficulty,\l{COLOR RED}Nuzlocke{COLOR DARK_GRAY} mode.", MSGBOX_DEFAULT)
			multichoice(21, 0, MULTI_COLRESS_SETTINGS, FALSE)
			switch (var(VAR_RESULT)) {
				case 0:
					call(EventScript_Settings_BrutalMode)
				case 1:
					call(EventScript_Settings_Nuzlocke)
				case 2:
					call(EventScript_MusicMenu)
				case 3:
					call(EventScript_ExpAll)
				case 4:
					call(EventScript_Surveillance)
				case 5:
				case MULTI_B_PRESSED:
					setvar(VAR_TEMP_1, 1)
			}
		} elif ((flag(FLAG_BRUTAL_MODE_ON) == false) && (flag(FLAG_NUZLOCKE_ON) == true) && (flag(FLAG_RANDOMIZER_ON) == false)) {
			msgbox("You are currently playing on\n{COLOR RED}Default{COLOR DARK_GRAY} difficulty,\l{COLOR RED}Nuzlocke{COLOR DARK_GRAY} mode.", MSGBOX_DEFAULT)
			multichoice(21, 0, MULTI_COLRESS_SETTINGS, FALSE)
			switch (var(VAR_RESULT)) {
				case 0:
					msgbox(gText_Colress_DefaultExplained)
				case 1:
					call(EventScript_Settings_Nuzlocke)
				case 2:
					call(EventScript_MusicMenu)
				case 3:
					call(EventScript_ExpAll)
				case 4:
					call(EventScript_Surveillance)
				case 5:
				case MULTI_B_PRESSED:
					setvar(VAR_TEMP_1, 1)
			}
		} elif ((flag(FLAG_BRUTAL_MODE_ON) == true) && (flag(FLAG_NUZLOCKE_ON) == false) && (flag(FLAG_RANDOMIZER_ON) == false)) {
			msgbox("You are currently playing on\n{COLOR RED}Brutal{COLOR DARK_GRAY} difficulty,\l{COLOR RED}Vanilla{COLOR DARK_GRAY} mode.", MSGBOX_DEFAULT)
			multichoice(21, 0, MULTI_COLRESS_SETTINGS, FALSE)
			switch (var(VAR_RESULT)) {
				case 0:
					call(EventScript_Settings_BrutalMode)
				case 1:
					msgbox(gText_Colress_VanillaExplanation)
				case 2:
					call(EventScript_MusicMenu)
				case 3:
					call(EventScript_ExpAll)
				case 4:
					call(EventScript_Surveillance)
				case 5:
				case MULTI_B_PRESSED:
					setvar(VAR_TEMP_1, 1)
			}
		} else {
			msgbox("You are currently playing on\n{COLOR RED}Default{COLOR DARK_GRAY} difficulty,\l{COLOR RED}Vanilla{COLOR DARK_GRAY} mode.", MSGBOX_DEFAULT)
			multichoice(21, 0, MULTI_COLRESS_SETTINGS, FALSE)
			switch (var(VAR_RESULT)) {
				case 0:
					msgbox(gText_Colress_DefaultExplained)
				case 1:
					msgbox(gText_Colress_VanillaExplanation)
				case 2:
					call(EventScript_MusicMenu)
				case 3:
					call(EventScript_ExpAll)
				case 4:
					call(EventScript_Surveillance)
				case 5:
				case MULTI_B_PRESSED:
					setvar(VAR_TEMP_1, 1)
			}
		}
	}
	goto(EventScript_WhenUReady)
}

text gText_Colress_VanillaExplanation {
	"{COLOR RED}Vanilla{COLOR DARK_GRAY} mode does not add any extra\nmodifications."
}

text gText_Colress_DefaultExplained {
	format("{COLOR RED}Default{COLOR DARK_GRAY} is the easier of the two difficulty options.\p"
	"It is recommended for any first playthroughs.")
}

text gText_Colress_BrutalExplained {
	format("{COLOR RED}Brutal{COLOR DARK_GRAY} is the harder of the two difficulty options.\p"
	"All Leviathans are far more challenging.\p"
	"In addition, there are a number of rules implemented to make this mode even more difficult.\p"
	"Defeating all trainers is required to progress to the Sanctuary.\p"
	"Items cannot be used in battle.\p"
	"Set mode cannot be turned off.\p"
	"Pokémon cannot gain EVs.\p"
	"Trainer battles give less money.\p"
	"Items cannot be farmed from wild Pokémon or any other means.\p"
	"Many helpful NPCs are unavailable.\p"
	"Some moves use more PP than normal and opponents do not use PP.\p"
	"Some items are more expensive than normal.\p"
	"If you play on {COLOR RED}Brutal{COLOR DARK_GRAY}, you can change to {COLOR RED}Default{COLOR DARK_GRAY} at any point by speaking to me.\p"
	"It is not recommended to play on {COLOR RED}Brutal{COLOR DARK_GRAY} unless you are familiar with {COLOR RED}Pokémon Battle Labyrinth{COLOR DARK_GRAY} already.")
}

text gText_Colress_GameModes {
	format("{COLOR RED}Pokémon Battle Labyrinth{COLOR DARK_GRAY} offers optional game modes.\p"
	"If you do not choose any of them, you will play on the {COLOR RED}Vanilla{COLOR DARK_GRAY} game mode, which adds no extra modifications.")
}

text gText_Colress_RandomizerExplanation {
	format("The {COLOR RED}Randomizer{COLOR DARK_GRAY} game mode randomizes wild encounters and gift Pokémon, including your starter.\p"
	"Trainer Pokémon are left unchanged.\p"
	"Note the {COLOR RED}Randomizer{COLOR DARK_GRAY} game mode cannot be turned off.")
}

text gText_Colress_NuzlockeExplained {
	format("The {COLOR RED}Nuzlocke{COLOR DARK_GRAY} game mode completely implements all standard Nuzlocke rules, such as permanent death and capture restrictions.\p"
	"It comes with Species Clause and Shiny Clause.\p"
	"You can turn off {COLOR RED}Nuzlocke{COLOR DARK_GRAY} mode at any point by speaking to me.\p"
	"It is not recommended to play {COLOR RED}Nuzlocke{COLOR DARK_GRAY} mode unless you are familiar with Nuzlockes already.")
}

script EventScript_Settings_BrutalMode {
	msgbox(gText_Colress_BrutalExplained)
	msgbox(format("Would you like to turn off {COLOR RED}Brutal{COLOR DARK_GRAY} and switch to {COLOR RED}Default{COLOR DARK_GRAY}?"), MSGBOX_YESNO)
	if (var(VAR_RESULT) == YES) {
		msgbox(format("Are you sure you would like to turn off {COLOR RED}Brutal{COLOR DARK_GRAY} and switch to {COLOR RED}Default{COLOR DARK_GRAY}?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == YES) {
			playse(SE_PC_OFF)
			msgbox("{COLOR RED}Brutal{COLOR DARK_GRAY} difficulty turned off.\nDifficulty set to {COLOR RED}Default{COLOR DARK_GRAY}.", MSGBOX_DEFAULT)
			waitse
			closemessage
			clearflag(FLAG_BRUTAL_MODE_ON)
			clearflag(FLAG_SMART_WILD_AI_ON)
			special(ReverseHiddenItemFlags)
		}
	}
}

script EventScript_Settings_NuzlockeRandomizer {
	msgbox(gText_Colress_RandomizerExplanation)
	msgbox(gText_Colress_NuzlockeExplained)
	buffernumberstring(0, VAR_NUZLOCKE_DEATHS)
	msgbox(gText_Colress_NumDeathsNuzlocke)
	msgbox(gText_Colress_WouldTurnOffNuzlocke, MSGBOX_YESNO)
	if (var(VAR_RESULT) == YES) {
		msgbox(gText_Colress_SureTurnOffNuzlocke, MSGBOX_YESNO)
		if (var(VAR_RESULT) == YES) {
			playse(SE_PC_OFF)
			msgbox("{COLOR RED}Randomlocke{COLOR DARK_GRAY} mode turned off.\nMode set to {COLOR RED}Randomizer{COLOR DARK_GRAY}.", MSGBOX_DEFAULT)
			waitse
			closemessage
			clearflag(FLAG_NUZLOCKE_ON)
			clearflag(FLAG_ZONE13C_NUZLOCKE_FOSSIL_RECEIVED)
			callnative(GlobalNuzlockeClear)
		}
	}
}

text gText_Colress_WouldTurnOffNuzlocke {
	"Would you like to turn off {COLOR RED}Nuzlocke{COLOR DARK_GRAY}\nand switch to {COLOR RED}Vanilla{COLOR DARK_GRAY}?"
}

text gText_Colress_SureTurnOffNuzlocke {
	"Are you sure you would like to turn\n"
	"off {COLOR RED}Nuzlocke{COLOR DARK_GRAY} and switch to {COLOR RED}Vanilla{COLOR DARK_GRAY}?"
}

script EventScript_Settings_Nuzlocke {
	msgbox(gText_Colress_NuzlockeExplained)
	buffernumberstring(0, VAR_NUZLOCKE_DEATHS)
	msgbox(gText_Colress_NumDeathsNuzlocke)
	msgbox(gText_Colress_WouldTurnOffNuzlocke, MSGBOX_YESNO)
	if (var(VAR_RESULT) == YES) {
		msgbox(gText_Colress_SureTurnOffNuzlocke, MSGBOX_YESNO)
		if (var(VAR_RESULT) == YES) {
			playse(SE_PC_OFF)
			msgbox("{COLOR RED}Nuzlocke{COLOR DARK_GRAY} mode turned off.\nMode set to {COLOR RED}Vanilla{COLOR DARK_GRAY}.", MSGBOX_DEFAULT)
			waitse
			closemessage
			clearflag(FLAG_NUZLOCKE_ON)
			clearflag(FLAG_ZONE13C_NUZLOCKE_FOSSIL_RECEIVED)
			callnative(GlobalNuzlockeClear)
		}
	}
}

text gText_Colress_NumDeathsNuzlocke {
	"So far there have been {STR_VAR_1} death(s)."
}

script EventScript_MusicMenu {
	while {
		fadedefaultbgm
		msgbox("Please select a music setting.", MSGBOX_DEFAULT)
		multichoice(21, 0, MULTI_MUSIC_TYPE, FALSE)
		switch (var(VAR_RESULT)) {
			case 0:
				setvar(VAR_TEMP_0, 1)
				while (var(VAR_TEMP_0) == 1) {
					switch (var(VAR_WILD_MUSIC)) {
						case 0:
							playbgm(MUS_VS_WILD, FALSE)
							msgbox("The Wild Pokémon music is\ncurrently set to RSE.", MSGBOX_DEFAULT)
						case 1:
							playbgm(MUS_RG_VS_WILD, FALSE)
							msgbox("The Wild Pokémon music is\ncurrently set to FRLG.", MSGBOX_DEFAULT)
						case 2:
							playbgm(MUS_DP_SEQ_BA_POKE, FALSE)
							msgbox("The Wild Pokémon music is\ncurrently set to DPPt.", MSGBOX_DEFAULT)
						case 3:
							playbgm(MUS_HG_SEQ_GS_VS_NORAPOKE, FALSE)
							msgbox("The Wild Pokémon music is\ncurrently set to HGSS (Johto).", MSGBOX_DEFAULT)
						case 4:
							playbgm(MUS_HG_SEQ_GS_VS_NORAPOKE_KANTO, FALSE)
							msgbox("The Wild Pokémon music is\ncurrently set to HGSS (Kanto).", MSGBOX_DEFAULT)
						case 5:
							// playbgm(MUS_BW_SEQ_BGM_VS_NORAPOKE, FALSE)
							msgbox("The Wild Pokémon music is\ncurrently set to BW.", MSGBOX_DEFAULT)
					}
					multichoice(21, 0, MULTI_MUSIC_WHICH_GAME, FALSE)
					switch (var(VAR_RESULT)) {
						case 0:
							setvar(VAR_WILD_MUSIC, 0)
						case 1:
							setvar(VAR_WILD_MUSIC, 1)
						case 2:
							setvar(VAR_WILD_MUSIC, 2)
						case 3:
							setvar(VAR_WILD_MUSIC, 3)
						case 4:
							setvar(VAR_WILD_MUSIC, 4)
						case 5:
							// setvar(VAR_WILD_MUSIC, 5)
							msgbox("The BW Wild Pokémon music is not\nfinished.")
						case MULTI_B_PRESSED:
							setvar(VAR_TEMP_0, 0)
					}
				}
			case 1:
				setvar(VAR_TEMP_0, 1)
				while (var(VAR_TEMP_0) == 1) {
					switch (var(VAR_TRAINER_MUSIC)) {
						case 0:
							playbgm(MUS_VS_TRAINER, FALSE)
							msgbox("The Trainer music is\ncurrently set to RSE.", MSGBOX_DEFAULT)
						case 1:
							playbgm(MUS_RG_VS_TRAINER, FALSE)
							msgbox("The Trainer music is\ncurrently set to FRLG.", MSGBOX_DEFAULT)
						case 2:
							playbgm(MUS_DP_SEQ_BA_TRAIN, FALSE)
							msgbox("The Trainer music is\ncurrently set to DPPt.", MSGBOX_DEFAULT)
						case 3:
							playbgm(MUS_HG_SEQ_GS_VS_TRAINER, FALSE)
							msgbox("The Trainer music is\ncurrently set to HGSS (Johto).", MSGBOX_DEFAULT)
						case 4:
							playbgm(MUS_HG_SEQ_GS_VS_TRAINER_KANTO, FALSE)
							msgbox("The Trainer music is\ncurrently set to HGSS (Kanto).", MSGBOX_DEFAULT)
						case 5:
							playbgm(MUS_BW_SEQ_BGM_VS_TRAINER, FALSE)
							msgbox("The Trainer music is\ncurrently set to BW.", MSGBOX_DEFAULT)
					}
					multichoice(21, 0, MULTI_MUSIC_WHICH_GAME, FALSE)
					switch (var(VAR_RESULT)) {
						case 0:
							setvar(VAR_TRAINER_MUSIC, 0)
						case 1:
							setvar(VAR_TRAINER_MUSIC, 1)
						case 2:
							setvar(VAR_TRAINER_MUSIC, 2)
						case 3:
							setvar(VAR_TRAINER_MUSIC, 3)
						case 4:
							setvar(VAR_TRAINER_MUSIC, 4)
						case 5:
							setvar(VAR_TRAINER_MUSIC, 5)
						case MULTI_B_PRESSED:
							setvar(VAR_TEMP_0, 0)
					}
				}
			case 2:
				setvar(VAR_TEMP_0, 1)
				while (var(VAR_TEMP_0) == 1) {
					switch (var(VAR_LEVIATHAN_MUSIC)) {
						case 0:
							playbgm(MUS_VS_GYM_LEADER, FALSE)
							msgbox("The Leviathan music is\ncurrently set to RSE.", MSGBOX_DEFAULT)
						case 1:
							playbgm(MUS_RG_VS_GYM_LEADER, FALSE)
							msgbox("The Leviathan music is\ncurrently set to FRLG.", MSGBOX_DEFAULT)
						case 2:
							playbgm(MUS_DP_SEQ_BA_GYM, FALSE)
							msgbox("The Leviathan music is\ncurrently set to DPPt.", MSGBOX_DEFAULT)
						case 3:
							playbgm(MUS_HG_SEQ_GS_VS_GYMREADER, FALSE)
							msgbox("The Leviathan music is\ncurrently set to HGSS (Johto).", MSGBOX_DEFAULT)
						case 4:
							playbgm(MUS_HG_SEQ_GS_VS_GYMREADER_KANTO, FALSE)
							msgbox("The Leviathan music is\ncurrently set to HGSS (Kanto).", MSGBOX_DEFAULT)
						case 5:
							// playbgm(MUS_BW_SEQ_BGM_VS_GYMLEADER, FALSE)
							msgbox("The Leviathan music is\ncurrently set to BW.", MSGBOX_DEFAULT)
					}
					multichoice(21, 0, MULTI_MUSIC_WHICH_GAME, FALSE)
					switch (var(VAR_RESULT)) {
						case 0:
							setvar(VAR_LEVIATHAN_MUSIC, 0)
						case 1:
							setvar(VAR_LEVIATHAN_MUSIC, 1)
						case 2:
							setvar(VAR_LEVIATHAN_MUSIC, 2)
						case 3:
							setvar(VAR_LEVIATHAN_MUSIC, 3)
						case 4:
							setvar(VAR_LEVIATHAN_MUSIC, 4)
						case 5:
							// setvar(VAR_LEVIATHAN_MUSIC, 5)
							msgbox("The BW Leviathan music is not\nfinished.")
						case MULTI_B_PRESSED:
							setvar(VAR_TEMP_0, 0)
					}
				}
			case 3:
			case MULTI_B_PRESSED:
				return
		}
	}
}

script EventScript_ExpAll {
	msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: The Exp. All setting, if turned on, gives members of your party that don't participate in battle 25% experience.\pThe game's experience curve is balanced around the Exp. All being turned on, though you may turn it off if you choose."))
	if (flag(FLAG_EXP_ALL_ON) == true) {
		msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: The Exp. All is currently on. Would you like to turn it off?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == YES) {
			playse(SE_PC_OFF)
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Turned the Exp. All off."), MSGBOX_DEFAULT)
			waitse
			closemessage
			clearflag(FLAG_EXP_ALL_ON)
		}
	} else {
		msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: The Exp. All is currently off. Would you like to turn it on?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == YES) {
			playse(SE_PC_ON)
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Turned the Exp. All on."), MSGBOX_DEFAULT)
			waitse
			closemessage
			setflag(FLAG_EXP_ALL_ON)
		}
	}
	return
}

script EventScript_Surveillance {
	msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: In trainer battles, you can Surveil the opposing party to gain more information."))
	if (flag(FLAG_FULL_PREVIEW_ON) == true) {
		msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Surveil currently reveals all information about the opposing party.\pWould you like to decrease the amount of information it reveals?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == YES) {
			playse(SE_PC_OFF)
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Lowered the power of Surveil.\pYou will only be able to view the opposing team's Pokémon and their health."), MSGBOX_DEFAULT)
			waitse
			closemessage
			clearflag(FLAG_FULL_PREVIEW_ON)
		}
	} else {
		msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Surveil currently reveals only the opposing team's Pokémon and their health.\pWould you like to increase the amount of information it reveals?"), MSGBOX_YESNO)
		if (var(VAR_RESULT) == YES) {
			playse(SE_PC_ON)
			msgbox(format("{COLOR BLUE}Colress{COLOR DARK_GRAY}: Increased the power of Surveil.\pYou will be able to view all information about the opposing party."), MSGBOX_DEFAULT)
			waitse
			closemessage
			setflag(FLAG_FULL_PREVIEW_ON)
		}
	}
	return
}

script EventScript_WarpZone0 {
	clearflag(FLAG_IS_REVISITING_ZONE)
	switch(var(VAR_REVISITING_ZONE)) {
		case 1:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 15, 32)
			waitstate
		case 2:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 19, 32)
			waitstate
		case 3:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 23, 32)
			waitstate
		case 4:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 27, 32)
			waitstate
		case 5:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 31, 32)
			waitstate
		case 6:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 35, 32)
			waitstate
		case 7:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 39, 32)
			waitstate
		case 8:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 43, 32)
			waitstate
		case 9:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 47, 32)
			waitstate
		case 10:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 51, 32)
			waitstate
		case 11:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 15, 25)
			waitstate
		case 12:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 19, 25)
			waitstate
		case 13:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 23, 25)
			waitstate
		case 14:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 27, 25)
			waitstate
		case 15:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 31, 25)
			waitstate
		case 16:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 35, 25)
			waitstate
		case 17:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 39, 25)
			waitstate
		case 18:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 43, 25)
			waitstate
		case 19:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 47, 25)
			waitstate
		case 20:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 51, 25)
			waitstate
		case 21:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 15, 18)
			waitstate
		case 22:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 19, 18)
			waitstate
		case 23:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 23, 18)
			waitstate
		case 24:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 27, 18)
			waitstate
		case 25:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 31, 18)
			waitstate
		case 26:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 35, 18)
			waitstate
		case 27:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 39, 18)
			waitstate
		case 28:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 43, 18)
			waitstate
		case 29:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 47, 18)
			waitstate
		case 30:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 51, 18)
			waitstate
		case 31:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 15, 11)
			waitstate
		case 32:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 19, 11)
			waitstate
		case 33:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 23, 11)
			waitstate
		case 34:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 27, 11)
			waitstate
		case 35:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 31, 11)
			waitstate
		case 36:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 35, 11)
			waitstate
		case 37:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 39, 11)
			waitstate
		case 38:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 43, 11)
			waitstate
		case 39:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 47, 11)
			waitstate
		case 40:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 51, 11)
			waitstate
		case 41:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 15, 4)
			waitstate
		case 42:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 19, 4)
			waitstate
		case 43:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 23, 4)
			waitstate
		case 44:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 27, 4)
			waitstate
		case 45:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 31, 4)
			waitstate
		case 46:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 35, 4)
			waitstate
		case 47:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 39, 4)
			waitstate
		case 48:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 43, 4)
			waitstate
		case 49:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 47, 4)
			waitstate
		case 50:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 51, 4)
			waitstate
		case 51:
			setvar(VAR_REVISITING_ZONE, 0)
			warpteleport(MAP_ZONE0D, 255, 2, 25)
			waitstate
	}
}

text gText_ItemChestIsEmpty {
	format("The item chest is empty.")
}

script Zone_EventScript_RetirePrompt {
	lockall
	showmoneybox(0, 0, 0)
	msgbox(format("Would you like to retire your attempt at this Zone?\pYou will lose all your progress so far and any money you received from trainers, as well as half of your remaining money.\pAre you sure you want to return to the Sanctuary?"), MSGBOX_YESNO)
	if (var(VAR_RESULT) == NO) {
		closemessage
		hidemoneybox
		releaseall
		end
	}
	clearflag(FLAG_IN_NEW_ZONE)
	removemoney(0)
	updatemoneybox
	msgbox(format("Warping now…"))
	switch (var(VAR_ZONE)) {
		case 1:
			cleartrainerflag(TRAINER_NINA)
			cleartrainerflag(TRAINER_MARIAM)
			cleartrainerflag(TRAINER_OSCAR)
			clearflag(FLAG_BEAT_LEVIATHAN_1)
			setvar(VAR_ZONE_1_STATE, 0)
			warpteleport(MAP_ZONE0SANCTUARY, 255, 22, 7)
			waitstate
		case 2:
			cleartrainerflag(TRAINER_POLLY)
			cleartrainerflag(TRAINER_JEREMIAH)
			cleartrainerflag(TRAINER_HARPER)
			cleartrainerflag(TRAINER_ARTHUR)
			clearflag(FLAG_BEAT_LEVIATHAN_2)
			setvar(VAR_ZONE_2_STATE, 0)
			warpteleport(MAP_ZONE1SANCTUARY, 255, 22, 7)
			waitstate
		case 3:
			cleartrainerflag(TRAINER_JEMMA)
			cleartrainerflag(TRAINER_PATRICK)
			cleartrainerflag(TRAINER_BORIS)
			cleartrainerflag(TRAINER_ANNABELLE)
			cleartrainerflag(TRAINER_RICHARD)
			clearflag(FLAG_BEAT_LEVIATHAN_3)
			setvar(VAR_ZONE_3_STATE, 0)
			warpteleport(MAP_ZONE2SANCTUARY, 255, 22, 7)
			waitstate
		case 4:
			cleartrainerflag(TRAINER_HERMAN)
			cleartrainerflag(TRAINER_RALPH)
			cleartrainerflag(TRAINER_SANTIAGO)
			cleartrainerflag(TRAINER_CHLOE_AND_KAYA)
			cleartrainerflag(TRAINER_FRED)
			cleartrainerflag(TRAINER_LUCIA)
			clearflag(FLAG_BEAT_LEVIATHAN_4)
			setvar(VAR_ZONE_4_STATE, 0)
			warpteleport(MAP_ZONE3SANCTUARY, 255, 22, 7)
			waitstate
		case 5:
			cleartrainerflag(TRAINER_ANNE_AND_JUNE)
			cleartrainerflag(TRAINER_GILBERT)
			cleartrainerflag(TRAINER_REBECCA)
			cleartrainerflag(TRAINER_RYAN)
			cleartrainerflag(TRAINER_CAITLYN)
			cleartrainerflag(TRAINER_KENNETH)
			cleartrainerflag(TRAINER_CLINTON)
			clearflag(FLAG_BEAT_LEVIATHAN_5)
			setvar(VAR_ZONE_5_STATE, 0)
			warpteleport(MAP_ZONE4SANCTUARY, 255, 22, 7)
			waitstate
		case 6:
			cleartrainerflag(TRAINER_ZACK)
			cleartrainerflag(TRAINER_MELANIE)
			cleartrainerflag(TRAINER_CONSTANCE)
			cleartrainerflag(TRAINER_FRANK)
			cleartrainerflag(TRAINER_DUDLEY)
			cleartrainerflag(TRAINER_DAISY)
			clearflag(FLAG_BEAT_LEVIATHAN_6)
			setvar(VAR_ZONE_6_STATE, 0)
			warpteleport(MAP_ZONE5SANCTUARY, 255, 22, 7)
			waitstate
		case 7:
			cleartrainerflag(TRAINER_MILLIE)
			cleartrainerflag(TRAINER_PAIGE)
			cleartrainerflag(TRAINER_SETH)
			cleartrainerflag(TRAINER_JAMAL)
			cleartrainerflag(TRAINER_CONNIE)
			clearflag(FLAG_BEAT_LEVIATHAN_7)
			cleartrainerflag(TRAINER_JIMMY)
			cleartrainerflag(TRAINER_EMILIANO)
			cleartrainerflag(TRAINER_KAREN)
			cleartrainerflag(TRAINER_JAYDEN)
			cleartrainerflag(TRAINER_NEIL)
			cleartrainerflag(TRAINER_TAMARA)
			clearflag(FLAG_BEAT_LEVIATHAN_8)
			clearflag(FLAG_HIDE_ZONE8D_WALLY)
			setvar(VAR_ZONE_8_STATE, 0)
			warpteleport(MAP_ZONE6SANCTUARY, 255, 22, 7)
			waitstate
		case 9:
			cleartrainerflag(TRAINER_COOPER)
			cleartrainerflag(TRAINER_CARMINE)
			clearflag(FLAG_HIDE_ZONE9A_ARI_WINSTRATE)
			setvar(VAR_ZONE_9_STATE, 0)
			warpteleport(MAP_ZONE8SANCTUARY, 255, 22, 7)
			waitstate
		case 10:
			cleartrainerflag(TRAINER_KYLE)
			cleartrainerflag(TRAINER_BELLE)
			cleartrainerflag(TRAINER_DEWEY)
			cleartrainerflag(TRAINER_PEARLIE)
			cleartrainerflag(TRAINER_ERNEST)
			cleartrainerflag(TRAINER_ALANA)
			cleartrainerflag(TRAINER_SUSAN)
			cleartrainerflag(TRAINER_CONRAD)
			clearflag(FLAG_BEAT_LEVIATHAN_9)
			warpteleport(MAP_ZONE9SANCTUARY, 255, 22, 7)
			waitstate
		case 11:
			cleartrainerflag(TRAINER_JEANETTE)
			cleartrainerflag(TRAINER_EMMA_AND_LEO)
			cleartrainerflag(TRAINER_REGINA)
			cleartrainerflag(TRAINER_JOEL)
			clearflag(FLAG_BEAT_LEVIATHAN_10)
			setvar(VAR_ZONE_11_STATE, 0)
			warpteleport(MAP_ZONE10SANCTUARY, 255, 22, 7)
			waitstate
		case 12:
			cleartrainerflag(TRAINER_ESSENCE)
			cleartrainerflag(TRAINER_DOLORES)
			cleartrainerflag(TRAINER_TREVOR)
			cleartrainerflag(TRAINER_RANDOLPH)
			cleartrainerflag(TRAINER_FEDERICO)
			cleartrainerflag(TRAINER_GENIE)
			cleartrainerflag(TRAINER_HILDA)
			cleartrainerflag(TRAINER_KINLEY)
			clearflag(FLAG_HIDE_ZONE12A_CAMPER_PICNICKER)
			setvar(VAR_ZONE_12_STATE, 0)
			warpteleport(MAP_ZONE11SANCTUARY, 255, 22, 7)
			waitstate
		case 13:
			cleartrainerflag(TRAINER_VIOLET)
			cleartrainerflag(TRAINER_WANDA)
			cleartrainerflag(TRAINER_AMBER_AND_KIM)
			cleartrainerflag(TRAINER_JAN_AND_ERIN)
			cleartrainerflag(TRAINER_STEVE)
			cleartrainerflag(TRAINER_GOULD)
			cleartrainerflag(TRAINER_MENDEL)
			cleartrainerflag(TRAINER_DARWIN)
			cleartrainerflag(TRAINER_BART)
			cleartrainerflag(TRAINER_NIGEL)
			cleartrainerflag(TRAINER_LOLA)
			cleartrainerflag(TRAINER_CHARLIE)
			cleartrainerflag(TRAINER_TODD)
			cleartrainerflag(TRAINER_RUSSELL)
			cleartrainerflag(TRAINER_OTIS)
			clearflag(FLAG_BEAT_LEVIATHAN_11)
			clearflag(FLAG_BEAT_LEVIATHAN_12)
			warpteleport(MAP_ZONE12SANCTUARY, 255, 22, 7)
			waitstate
		case 15:
			clearflag(FLAG_BEAT_LEVIATHAN_13)
			setvar(VAR_ZONE_15_STATE, 0)
			warpteleport(MAP_ZONE14SANCTUARY, 255, 22, 7)
			waitstate
		case 16:
			warpteleport(MAP_ZONE15SANCTUARY, 255, 22, 7)
			waitstate
		case 17:
			warpteleport(MAP_ZONE16SANCTUARY, 255, 22, 7)
			waitstate
		case 18:
			warpteleport(MAP_ZONE17SANCTUARY, 255, 22, 7)
			waitstate
		case 20:
			warpteleport(MAP_ZONE20SANCTUARY, 255, 22, 7)
			waitstate
		case 21:
			warpteleport(MAP_ZONE20SANCTUARY, 255, 22, 7)
			waitstate
		case 22:
			warpteleport(MAP_ZONE21SANCTUARY, 255, 22, 7)
			waitstate
		case 23:
			warpteleport(MAP_ZONE22SANCTUARY, 255, 22, 7)
			waitstate
		case 24:
			warpteleport(MAP_ZONE23SANCTUARY, 255, 22, 7)
			waitstate
		case 26:
			warpteleport(MAP_ZONE25SANCTUARY, 255, 22, 7)
			waitstate
	}
	releaseall
	end
}

script Zone_EventScript_Info {
	lockall
	multichoice(21, 0, MULTI_INFO, FALSE)
	switch (var(VAR_RESULT)) {
		case 0:
			specialvar(VAR_RESULT, GetCurrentLevelCap)
			buffernumberstring(0, VAR_RESULT)
			msgbox("The current level cap is {STR_VAR_1}.")
		case 1:
			specialvar(VAR_RESULT, GetNumTrainersRemaining)
			buffernumberstring(0, VAR_RESULT)
			switch(var(VAR_RESULT)) {
				case 0:
					msgbox(format("There are no opponents remaining\nin this area."))
				case 1:
					msgbox(gText_OneOpponentRemaining)
				case 1000:
					msgbox(format("There are no opponents in this area."))
				default:
					msgbox(gText_MultipleOpponentsRemaining)
			}
		case 2:
			specialvar(VAR_RESULT, GetNumChests)
			buffernumberstring(0, VAR_RESULT)
			if (var(VAR_RESULT) == 0) {
				msgbox(format("There are no item chests in this area."))
			} else {
				specialvar(VAR_RESULT, GetNumChestsFound)
				buffernumberstring(1, VAR_RESULT)
				msgbox("You have found {STR_VAR_2}/{STR_VAR_1} item chests\nin this area.")
			}
			if (flag(FLAG_BRUTAL_MODE_ON) == false) {
				specialvar(VAR_RESULT, GetNumHiddenItems)
				buffernumberstring(0, VAR_RESULT)
				if (var(VAR_RESULT) == 0) {
					msgbox(format("There are no hidden items in this area."))
				} else {
					specialvar(VAR_RESULT, GetNumHiddenItemsFound)
					buffernumberstring(1, VAR_RESULT)
					msgbox("You have found {STR_VAR_2}/{STR_VAR_1} hidden items\nin this area.")
				}
			}
	}
	releaseall
	end
}

text gText_OneOpponentRemaining {
	format("There is 1 opponent remaining in this area.")
}

text gText_MultipleOpponentsRemaining {
	"There are still {STR_VAR_1} opponents\nremaining in the area."
}

raw `
EventScript_ExitSign::
	msgbox gText_ExitSign, MSGBOX_SIGN
	end

EventScript_GeneralSign::
	msgbox gText_GeneralSign, MSGBOX_SIGN
	end

EventScript_UniqueSign::
	msgbox gText_UniqueSign, MSGBOX_SIGN
	end

EventScript_ServicesSign::
	msgbox gText_ServicesSign, MSGBOX_SIGN
	end

EventScript_HealingSign::
	msgbox gText_HealingSign, MSGBOX_SIGN
	end
`
